
tr-embedded-cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f88  08007f88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004fe4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005058  20005058  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000233d8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db0  00000000  00000000  0004347c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00047230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019b8  00000000  00000000  00048d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005673  00000000  00000000  0004a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5df  00000000  00000000  0004fd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e87f1  00000000  00000000  0006d322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155b13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007674  00000000  00000000  00155b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ea0 	.word	0x08007ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007ea0 	.word	0x08007ea0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 fbb8 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f832 	bl	8000558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fd10 	bl	8000f18 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80004f8:	f000 fcc0 	bl	8000e7c <_ZL11MX_DMA_Initv>
  MX_CAN1_Init();
 80004fc:	f000 f896 	bl	800062c <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8000500:	f000 f8ce 	bl	80006a0 <_ZL12MX_CAN2_Initv>
  MX_I2C1_Init();
 8000504:	f000 f906 	bl	8000714 <_ZL12MX_I2C1_Initv>
  MX_SPI5_Init();
 8000508:	f000 f954 	bl	80007b4 <_ZL12MX_SPI5_Initv>
  MX_TIM2_Init();
 800050c:	f000 f98e 	bl	800082c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000510:	f000 fa24 	bl	800095c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000514:	f000 fa8a 	bl	8000a2c <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000518:	f000 fb20 	bl	8000b5c <_ZL12MX_TIM5_Initv>
  MX_TIM12_Init();
 800051c:	f000 fba6 	bl	8000c6c <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8000520:	f000 fbf4 	bl	8000d0c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000524:	f000 fc20 	bl	8000d68 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000528:	f000 fc4c 	bl	8000dc4 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 800052c:	f000 fc78 	bl	8000e20 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f004 fe38 	bl	80051a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x64>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x68>)
 800053a:	f004 fe7d 	bl	8005238 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x6c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f004 fe52 	bl	80051ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x60>
 800054a:	bf00      	nop
 800054c:	08007edc 	.word	0x08007edc
 8000550:	08000ff5 	.word	0x08000ff5
 8000554:	200005e4 	.word	0x200005e4

08000558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f007 fbcc 	bl	8007d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <_Z18SystemClock_Configv+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <_Z18SystemClock_Configv+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <_Z18SystemClock_Configv+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <_Z18SystemClock_Configv+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <_Z18SystemClock_Configv+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <_Z18SystemClock_Configv+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fc4f 	bl	8002e70 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80005e2:	f000 fd21 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fead 	bl	8003360 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000616:	f000 fd07 	bl	8001028 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000632:	4a1a      	ldr	r2, [pc, #104]	; (800069c <_ZL12MX_CAN1_Initv+0x70>)
 8000634:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000638:	2210      	movs	r2, #16
 800063a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 800065c:	2200      	movs	r2, #0
 800065e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000662:	2200      	movs	r2, #0
 8000664:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000668:	2200      	movs	r2, #0
 800066a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 800066e:	2200      	movs	r2, #0
 8000670:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 8000674:	2200      	movs	r2, #0
 8000676:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <_ZL12MX_CAN1_Initv+0x6c>)
 800067a:	f001 fb33 	bl	8001ce4 <HAL_CAN_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_ZL12MX_CAN1_Initv+0x66>
  {
    Error_Handler();
 800068e:	f000 fccb 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090
 800069c:	40006400 	.word	0x40006400

080006a0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006a6:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <_ZL12MX_CAN2_Initv+0x70>)
 80006a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <_ZL12MX_CAN2_Initv+0x6c>)
 80006ee:	f001 faf9 	bl	8001ce4 <HAL_CAN_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	bf14      	ite	ne
 80006f8:	2301      	movne	r3, #1
 80006fa:	2300      	moveq	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <_ZL12MX_CAN2_Initv+0x66>
  {
    Error_Handler();
 8000702:	f000 fc91 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000b8 	.word	0x200000b8
 8000710:	40006800 	.word	0x40006800

08000714 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800071a:	4a24      	ldr	r2, [pc, #144]	; (80007ac <_ZL12MX_I2C1_Initv+0x98>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000720:	4a23      	ldr	r2, [pc, #140]	; (80007b0 <_ZL12MX_I2C1_Initv+0x9c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 8000752:	f002 f9cd 	bl	8002af0 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000766:	f000 fc5f 	bl	8001028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800076e:	f002 fb03 	bl	8002d78 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 8000782:	f000 fc51 	bl	8001028 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <_ZL12MX_I2C1_Initv+0x94>)
 800078a:	f002 fb31 	bl	8002df0 <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 800079e:	f000 fc43 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007ba:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <_ZL12MX_SPI5_Initv+0x74>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <_ZL12MX_SPI5_Initv+0x70>)
 8000806:	f002 ffad 	bl	8003764 <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <_ZL12MX_SPI5_Initv+0x6a>
  {
    Error_Handler();
 800081a:	f000 fc05 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000134 	.word	0x20000134
 8000828:	40015000 	.word	0x40015000

0800082c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000856:	4b40      	ldr	r3, [pc, #256]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b39      	ldr	r3, [pc, #228]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000876:	4838      	ldr	r0, [pc, #224]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000878:	f003 f8c6 	bl	8003a08 <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 800088c:	f000 fbcc 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4619      	mov	r1, r3
 800089e:	482e      	ldr	r0, [pc, #184]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 80008a0:	f003 fd44 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80008b4:	f000 fbb8 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b8:	2360      	movs	r3, #96	; 0x60
 80008ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	4822      	ldr	r0, [pc, #136]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 80008d0:	f003 f9f2 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80008e4:	f000 fba0 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2204      	movs	r2, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 80008f0:	f003 f9e2 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf14      	ite	ne
 80008fa:	2301      	movne	r3, #1
 80008fc:	2300      	moveq	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000904:	f000 fb90 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2208      	movs	r2, #8
 800090c:	4619      	mov	r1, r3
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000910:	f003 f9d2 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 8000924:	f000 fb80 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	220c      	movs	r2, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 8000930:	f003 f9c2 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 8000944:	f000 fb70 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <_ZL12MX_TIM2_Initv+0x12c>)
 800094a:	f000 fd67 	bl	800141c <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000018c 	.word	0x2000018c

0800095c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8000980:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <_ZL12MX_TIM3_Initv+0xcc>)
 8000982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80009a6:	f003 f82f 	bl	8003a08 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80009ba:	f000 fb35 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80009ce:	f003 fcad 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80009e2:	f000 fb21 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	; 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2204      	movs	r2, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 80009fe:	f003 f95b 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000a12:	f000 fb09 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <_ZL12MX_TIM3_Initv+0xc8>)
 8000a18:	f000 fd00 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001d4 	.word	0x200001d4
 8000a28:	40000400 	.word	0x40000400

08000a2c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a50:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <_ZL12MX_TIM4_Initv+0x12c>)
 8000a52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a54:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a74:	4837      	ldr	r0, [pc, #220]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a76:	f002 ffc7 	bl	8003a08 <HAL_TIM_PWM_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2301      	movne	r3, #1
 8000a82:	2300      	moveq	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8000a8a:	f000 facd 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	482d      	ldr	r0, [pc, #180]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000a9e:	f003 fc45 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8000ab2:	f000 fab9 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	2360      	movs	r3, #96	; 0x60
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4821      	ldr	r0, [pc, #132]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000ace:	f003 f8f3 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8000ae2:	f000 faa1 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4819      	ldr	r0, [pc, #100]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000aee:	f003 f8e3 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8000b02:	f000 fa91 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2208      	movs	r2, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000b0e:	f003 f8d3 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL12MX_TIM4_Initv+0xfa>
  {
    Error_Handler();
 8000b22:	f000 fa81 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	220c      	movs	r2, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000b2e:	f003 f8c3 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <_ZL12MX_TIM4_Initv+0x11a>
  {
    Error_Handler();
 8000b42:	f000 fa71 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <_ZL12MX_TIM4_Initv+0x128>)
 8000b48:	f000 fc68 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000021c 	.word	0x2000021c
 8000b58:	40000800 	.word	0x40000800

08000b5c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b7e:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <_ZL12MX_TIM5_Initv+0x10c>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ba4:	482f      	ldr	r0, [pc, #188]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000ba6:	f002 ff2f 	bl	8003a08 <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf14      	ite	ne
 8000bb0:	2301      	movne	r3, #1
 8000bb2:	2300      	moveq	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8000bba:	f000 fa35 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4825      	ldr	r0, [pc, #148]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000bce:	f003 fbad 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8000be2:	f000 fa21 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000bfe:	f003 f85b 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bf14      	ite	ne
 8000c08:	2301      	movne	r3, #1
 8000c0a:	2300      	moveq	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8000c12:	f000 fa09 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000c1e:	f003 f84b 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf14      	ite	ne
 8000c28:	2301      	movne	r3, #1
 8000c2a:	2300      	moveq	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8000c32:	f000 f9f9 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2208      	movs	r2, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000c3e:	f003 f83b 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <_ZL12MX_TIM5_Initv+0xfa>
  {
    Error_Handler();
 8000c52:	f000 f9e9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <_ZL12MX_TIM5_Initv+0x108>)
 8000c58:	f000 fbe0 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000264 	.word	0x20000264
 8000c68:	40000c00 	.word	0x40000c00

08000c6c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <_ZL13MX_TIM12_Initv+0x9c>)
 8000c88:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000cac:	f002 feac 	bl	8003a08 <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf14      	ite	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	2300      	moveq	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <_ZL13MX_TIM12_Initv+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f9b2 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000cdc:	f002 ffec 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <_ZL13MX_TIM12_Initv+0x88>
  {
    Error_Handler();
 8000cf0:	f000 f99a 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <_ZL13MX_TIM12_Initv+0x98>)
 8000cf6:	f000 fb91 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200002ac 	.word	0x200002ac
 8000d08:	40001800 	.word	0x40001800

08000d0c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000d44:	f003 fb82 	bl	800444c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000d58:	f000 f966 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200002f4 	.word	0x200002f4
 8000d64:	40011000 	.word	0x40011000

08000d68 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000da0:	f003 fb54 	bl	800444c <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf14      	ite	ne
 8000daa:	2301      	movne	r3, #1
 8000dac:	2300      	moveq	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000db4:	f000 f938 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000338 	.word	0x20000338
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_ZL19MX_USART3_UART_Initv+0x58>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dfc:	f003 fb26 	bl	800444c <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000e10:	f000 f90a 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000037c 	.word	0x2000037c
 8000e1c:	40004800 	.word	0x40004800

08000e20 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e58:	f003 faf8 	bl	800444c <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000e6c:	f000 f8dc 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200003c0 	.word	0x200003c0
 8000e78:	40011400 	.word	0x40011400

08000e7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <_ZL11MX_DMA_Initv+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f001 f8c4 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f001 f8dd 	bl	8002084 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	200e      	movs	r0, #14
 8000ed0:	f001 f8bc 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed4:	200e      	movs	r0, #14
 8000ed6:	f001 f8d5 	bl	8002084 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2010      	movs	r0, #16
 8000ee0:	f001 f8b4 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee4:	2010      	movs	r0, #16
 8000ee6:	f001 f8cd 	bl	8002084 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	2011      	movs	r0, #17
 8000ef0:	f001 f8ac 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ef4:	2011      	movs	r0, #17
 8000ef6:	f001 f8c5 	bl	8002084 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	203a      	movs	r0, #58	; 0x3a
 8000f00:	f001 f8a4 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f04:	203a      	movs	r0, #58	; 0x3a
 8000f06:	f001 f8bd 	bl	8002084 <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

}
 8000fe2:	bf00      	nop
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f004 f9ad 	bl	800535c <osDelay>
 8001002:	e7fb      	b.n	8000ffc <_Z16StartDefaultTaskPv+0x8>

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001016:	f000 fe45 	bl	8001ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x54>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x54>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x54>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x54>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x54>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x54>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 ffe7 	bl	800204c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_CAN_MspInit+0x164>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d154      	bne.n	8001158 <HAL_CAN_MspInit+0xcc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10d      	bne.n	80010dc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	623b      	str	r3, [r7, #32]
 80010da:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001114:	2301      	movs	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001124:	2309      	movs	r3, #9
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4833      	ldr	r0, [pc, #204]	; (80011fc <HAL_CAN_MspInit+0x170>)
 8001130:	f001 fb32 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001146:	2309      	movs	r3, #9
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	482b      	ldr	r0, [pc, #172]	; (8001200 <HAL_CAN_MspInit+0x174>)
 8001152:	f001 fb21 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001156:	e047      	b.n	80011e8 <HAL_CAN_MspInit+0x15c>
  else if(hcan->Instance==CAN2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_CAN_MspInit+0x178>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d142      	bne.n	80011e8 <HAL_CAN_MspInit+0x15c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 800116c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 8001186:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_CAN_MspInit+0x168>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d10d      	bne.n	80011ac <HAL_CAN_MspInit+0x120>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_CAN_MspInit+0x16c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011c8:	2360      	movs	r3, #96	; 0x60
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011d8:	2309      	movs	r3, #9
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_CAN_MspInit+0x17c>)
 80011e4:	f001 fad8 	bl	8002798 <HAL_GPIO_Init>
}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40006400 	.word	0x40006400
 80011f4:	200005e8 	.word	0x200005e8
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40020000 	.word	0x40020000
 8001204:	40006800 	.word	0x40006800
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <HAL_I2C_MspInit+0x84>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12c      	bne.n	8001288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <HAL_I2C_MspInit+0x8c>)
 8001268:	f001 fa96 	bl	8002798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_I2C_MspInit+0x88>)
 8001276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_I2C_MspInit+0x88>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_SPI_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80012f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001308:	2305      	movs	r3, #5
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 8001314:	f001 fa40 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40015000 	.word	0x40015000
 8001324:	40023800 	.word	0x40023800
 8001328:	40021400 	.word	0x40021400

0800132c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d10e      	bne.n	800135c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800135a:	e04e      	b.n	80013fa <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_TIM_PWM_MspInit+0xe0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10e      	bne.n	8001384 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
}
 8001382:	e03a      	b.n	80013fa <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_TIM_PWM_MspInit+0xe4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10e      	bne.n	80013ac <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
}
 80013aa:	e026      	b.n	80013fa <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_TIM_PWM_MspInit+0xe8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10e      	bne.n	80013d4 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
}
 80013d2:	e012      	b.n	80013fa <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_TIM_PWM_MspInit+0xec>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10d      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_TIM_PWM_MspInit+0xdc>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40000400 	.word	0x40000400
 8001410:	40000800 	.word	0x40000800
 8001414:	40000c00 	.word	0x40000c00
 8001418:	40001800 	.word	0x40001800

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d13d      	bne.n	80014ba <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	4b77      	ldr	r3, [pc, #476]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a76      	ldr	r2, [pc, #472]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b74      	ldr	r3, [pc, #464]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a6f      	ldr	r2, [pc, #444]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
    PB3     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001476:	2308      	movs	r3, #8
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001486:	2301      	movs	r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	4864      	ldr	r0, [pc, #400]	; (8001624 <HAL_TIM_MspPostInit+0x208>)
 8001492:	f001 f981 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2|GPIO_PIN_3;
 8001496:	f248 030c 	movw	r3, #32780	; 0x800c
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a8:	2301      	movs	r3, #1
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	485d      	ldr	r0, [pc, #372]	; (8001628 <HAL_TIM_MspPostInit+0x20c>)
 80014b4:	f001 f970 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80014b8:	e0ae      	b.n	8001618 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a5b      	ldr	r2, [pc, #364]	; (800162c <HAL_TIM_MspPostInit+0x210>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d11e      	bne.n	8001502 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a54      	ldr	r2, [pc, #336]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f0:	2302      	movs	r3, #2
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	484d      	ldr	r0, [pc, #308]	; (8001630 <HAL_TIM_MspPostInit+0x214>)
 80014fc:	f001 f94c 	bl	8002798 <HAL_GPIO_Init>
}
 8001500:	e08a      	b.n	8001618 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_TIM_MspPostInit+0x218>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13d      	bne.n	8001588 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a3b      	ldr	r2, [pc, #236]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001554:	2302      	movs	r3, #2
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4831      	ldr	r0, [pc, #196]	; (8001624 <HAL_TIM_MspPostInit+0x208>)
 8001560:	f001 f91a 	bl	8002798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
 8001564:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001576:	2302      	movs	r3, #2
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	482d      	ldr	r0, [pc, #180]	; (8001638 <HAL_TIM_MspPostInit+0x21c>)
 8001582:	f001 f909 	bl	8002798 <HAL_GPIO_Init>
}
 8001586:	e047      	b.n	8001618 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM5)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2b      	ldr	r2, [pc, #172]	; (800163c <HAL_TIM_MspPostInit+0x220>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11f      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80015ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015c0:	2302      	movs	r3, #2
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <HAL_TIM_MspPostInit+0x224>)
 80015cc:	f001 f8e4 	bl	8002798 <HAL_GPIO_Init>
}
 80015d0:	e022      	b.n	8001618 <HAL_TIM_MspPostInit+0x1fc>
  else if(htim->Instance==TIM12)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_TIM_MspPostInit+0x228>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d11d      	bne.n	8001618 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80015e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ea:	6313      	str	r3, [r2, #48]	; 0x30
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_MspPostInit+0x204>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f8:	2340      	movs	r3, #64	; 0x40
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001608:	2309      	movs	r3, #9
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_TIM_MspPostInit+0x224>)
 8001614:	f001 f8c0 	bl	8002798 <HAL_GPIO_Init>
}
 8001618:	bf00      	nop
 800161a:	3738      	adds	r7, #56	; 0x38
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400
 8001628:	40020000 	.word	0x40020000
 800162c:	40000400 	.word	0x40000400
 8001630:	40020800 	.word	0x40020800
 8001634:	40000800 	.word	0x40000800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40000c00 	.word	0x40000c00
 8001640:	40021c00 	.word	0x40021c00
 8001644:	40001800 	.word	0x40001800

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b090      	sub	sp, #64	; 0x40
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7f      	ldr	r2, [pc, #508]	; (8001864 <HAL_UART_MspInit+0x21c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d164      	bne.n	8001734 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
 800166e:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_UART_MspInit+0x220>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <HAL_UART_MspInit+0x220>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a76      	ldr	r2, [pc, #472]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b74      	ldr	r3, [pc, #464]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80016a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b4:	2307      	movs	r3, #7
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	486b      	ldr	r0, [pc, #428]	; (800186c <HAL_UART_MspInit+0x224>)
 80016c0:	f001 f86a 	bl	8002798 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016c6:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <HAL_UART_MspInit+0x22c>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016ca:	4b69      	ldr	r3, [pc, #420]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d8:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ec:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <HAL_UART_MspInit+0x228>)
 80016fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001700:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <HAL_UART_MspInit+0x228>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001706:	485a      	ldr	r0, [pc, #360]	; (8001870 <HAL_UART_MspInit+0x228>)
 8001708:	f000 fcca 	bl	80020a0 <HAL_DMA_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001712:	f7ff fc89 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a55      	ldr	r2, [pc, #340]	; (8001870 <HAL_UART_MspInit+0x228>)
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
 800171c:	4a54      	ldr	r2, [pc, #336]	; (8001870 <HAL_UART_MspInit+0x228>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2105      	movs	r1, #5
 8001726:	2025      	movs	r0, #37	; 0x25
 8001728:	f000 fc90 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800172c:	2025      	movs	r0, #37	; 0x25
 800172e:	f000 fca9 	bl	8002084 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001732:	e17a      	b.n	8001a2a <HAL_UART_MspInit+0x3e2>
  else if(huart->Instance==USART2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_UART_MspInit+0x230>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f040 80a8 	bne.w	8001890 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a47      	ldr	r2, [pc, #284]	; (8001868 <HAL_UART_MspInit+0x220>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a40      	ldr	r2, [pc, #256]	; (8001868 <HAL_UART_MspInit+0x220>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b3e      	ldr	r3, [pc, #248]	; (8001868 <HAL_UART_MspInit+0x220>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001778:	2360      	movs	r3, #96	; 0x60
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001788:	2307      	movs	r3, #7
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	483a      	ldr	r0, [pc, #232]	; (800187c <HAL_UART_MspInit+0x234>)
 8001794:	f001 f800 	bl	8002798 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_UART_MspInit+0x238>)
 800179a:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <HAL_UART_MspInit+0x23c>)
 800179c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017d8:	4829      	ldr	r0, [pc, #164]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017da:	f000 fc61 	bl	80020a0 <HAL_DMA_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80017e4:	f7ff fc20 	bl	8001028 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a25      	ldr	r2, [pc, #148]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <HAL_UART_MspInit+0x238>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_UART_MspInit+0x240>)
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_UART_MspInit+0x244>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_UART_MspInit+0x240>)
 80017fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001800:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001804:	2240      	movs	r2, #64	; 0x40
 8001806:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_UART_MspInit+0x240>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001814:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <HAL_UART_MspInit+0x240>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x240>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001836:	f000 fc33 	bl	80020a0 <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001840:	f7ff fbf2 	bl	8001028 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x240>)
 8001848:	635a      	str	r2, [r3, #52]	; 0x34
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_UART_MspInit+0x240>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2105      	movs	r1, #5
 8001854:	2026      	movs	r0, #38	; 0x26
 8001856:	f000 fbf9 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800185a:	2026      	movs	r0, #38	; 0x26
 800185c:	f000 fc12 	bl	8002084 <HAL_NVIC_EnableIRQ>
}
 8001860:	e0e3      	b.n	8001a2a <HAL_UART_MspInit+0x3e2>
 8001862:	bf00      	nop
 8001864:	40011000 	.word	0x40011000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	20000404 	.word	0x20000404
 8001874:	40026440 	.word	0x40026440
 8001878:	40004400 	.word	0x40004400
 800187c:	40020c00 	.word	0x40020c00
 8001880:	20000464 	.word	0x20000464
 8001884:	40026088 	.word	0x40026088
 8001888:	200004c4 	.word	0x200004c4
 800188c:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a67      	ldr	r2, [pc, #412]	; (8001a34 <HAL_UART_MspInit+0x3ec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	f040 8095 	bne.w	80019c6 <HAL_UART_MspInit+0x37e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a64      	ldr	r2, [pc, #400]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a5d      	ldr	r2, [pc, #372]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80018d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e6:	2307      	movs	r3, #7
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	4619      	mov	r1, r3
 80018f0:	4852      	ldr	r0, [pc, #328]	; (8001a3c <HAL_UART_MspInit+0x3f4>)
 80018f2:	f000 ff51 	bl	8002798 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_UART_MspInit+0x3fc>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 80018fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001902:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190a:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001910:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001916:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001918:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800192a:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 800192c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001930:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001932:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001938:	4841      	ldr	r0, [pc, #260]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 800193a:	f000 fbb1 	bl	80020a0 <HAL_DMA_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x300>
      Error_Handler();
 8001944:	f7ff fb70 	bl	8001028 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	4a3c      	ldr	r2, [pc, #240]	; (8001a40 <HAL_UART_MspInit+0x3f8>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001956:	4a3d      	ldr	r2, [pc, #244]	; (8001a4c <HAL_UART_MspInit+0x404>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_UART_MspInit+0x400>)
 800195c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001960:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_UART_MspInit+0x400>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_UART_MspInit+0x400>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001988:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_UART_MspInit+0x400>)
 800198c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001990:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_UART_MspInit+0x400>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001998:	482b      	ldr	r0, [pc, #172]	; (8001a48 <HAL_UART_MspInit+0x400>)
 800199a:	f000 fb81 	bl	80020a0 <HAL_DMA_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_UART_MspInit+0x360>
      Error_Handler();
 80019a4:	f7ff fb40 	bl	8001028 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_UART_MspInit+0x400>)
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_UART_MspInit+0x400>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2105      	movs	r1, #5
 80019b8:	2027      	movs	r0, #39	; 0x27
 80019ba:	f000 fb47 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019be:	2027      	movs	r0, #39	; 0x27
 80019c0:	f000 fb60 	bl	8002084 <HAL_NVIC_EnableIRQ>
}
 80019c4:	e031      	b.n	8001a2a <HAL_UART_MspInit+0x3e2>
  else if(huart->Instance==USART6)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_UART_MspInit+0x408>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d12c      	bne.n	8001a2a <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	6453      	str	r3, [r2, #68]	; 0x44
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_UART_MspInit+0x3f0>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001a08:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <HAL_UART_MspInit+0x40c>)
 8001a26:	f000 feb7 	bl	8002798 <HAL_GPIO_Init>
}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004800 	.word	0x40004800
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	20000524 	.word	0x20000524
 8001a44:	40026058 	.word	0x40026058
 8001a48:	20000584 	.word	0x20000584
 8001a4c:	40026028 	.word	0x40026028
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40021800 	.word	0x40021800

08001a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	2019      	movs	r0, #25
 8001a6e:	f000 faed 	bl	800204c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a72:	2019      	movs	r0, #25
 8001a74:	f000 fb06 	bl	8002084 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_InitTick+0xa0>)
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <HAL_InitTick+0xa0>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6453      	str	r3, [r2, #68]	; 0x44
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_InitTick+0xa0>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a94:	f107 0210 	add.w	r2, r7, #16
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fe2e 	bl	8003700 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001aa4:	f001 fe18 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8001aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_InitTick+0xa4>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9b      	lsrs	r3, r3, #18
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_InitTick+0xa8>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_InitTick+0xac>)
 8001abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ada:	f001 fecc 	bl	8003876 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d104      	bne.n	8001aee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ae4:	4806      	ldr	r0, [pc, #24]	; (8001b00 <HAL_InitTick+0xa8>)
 8001ae6:	f001 ff1f 	bl	8003928 <HAL_TIM_Base_Start_IT>
 8001aea:	4603      	mov	r3, r0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	20004fc0 	.word	0x20004fc0
 8001b04:	40010000 	.word	0x40010000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <NMI_Handler+0x4>

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA1_Stream1_IRQHandler+0x10>)
 8001b3a:	f000 fbf1 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000584 	.word	0x20000584

08001b48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <DMA1_Stream3_IRQHandler+0x10>)
 8001b4e:	f000 fbe7 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000524 	.word	0x20000524

08001b5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <DMA1_Stream5_IRQHandler+0x10>)
 8001b62:	f000 fbdd 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000464 	.word	0x20000464

08001b70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA1_Stream6_IRQHandler+0x10>)
 8001b76:	f000 fbd3 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200004c4 	.word	0x200004c4

08001b84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b8a:	f001 ff8c 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20004fc0 	.word	0x20004fc0

08001b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <USART1_IRQHandler+0x10>)
 8001b9e:	f002 fca3 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002f4 	.word	0x200002f4

08001bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <USART2_IRQHandler+0x10>)
 8001bb2:	f002 fc99 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000338 	.word	0x20000338

08001bc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USART3_IRQHandler+0x10>)
 8001bc6:	f002 fc8f 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000037c 	.word	0x2000037c

08001bd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA2_Stream2_IRQHandler+0x10>)
 8001bda:	f000 fba1 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000404 	.word	0x20000404

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c36:	f7ff ffd7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f006 f82f 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7fe fc53 	bl	80004e8 <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c50:	08007f90 	.word	0x08007f90
  ldr r2, =_sbss
 8001c54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c58:	20005058 	.word	0x20005058

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f9d4 	bl	8002036 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f7ff fee2 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff f9ce 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20005008 	.word	0x20005008

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20005008 	.word	0x20005008

08001ce4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0ed      	b.n	8001ed2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff f9c2 	bl	800108c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d18:	f7ff ffd8 	bl	8001ccc <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d1e:	e012      	b.n	8001d46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d20:	f7ff ffd4 	bl	8001ccc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d90b      	bls.n	8001d46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0c5      	b.n	8001ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0e5      	beq.n	8001d20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0202 	bic.w	r2, r2, #2
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d64:	f7ff ffb2 	bl	8001ccc <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d6a:	e012      	b.n	8001d92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d6c:	f7ff ffae 	bl	8001ccc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b0a      	cmp	r3, #10
 8001d78:	d90b      	bls.n	8001d92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e09f      	b.n	8001ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e5      	bne.n	8001d6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e1b      	ldrb	r3, [r3, #24]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7e5b      	ldrb	r3, [r3, #25]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e007      	b.n	8001df4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e9b      	ldrb	r3, [r3, #26]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d108      	bne.n	8001e0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0220 	bic.w	r2, r2, #32
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7edb      	ldrb	r3, [r3, #27]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0210 	bic.w	r2, r2, #16
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e007      	b.n	8001e48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0210 	orr.w	r2, r2, #16
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7f1b      	ldrb	r3, [r3, #28]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0208 	orr.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e007      	b.n	8001e72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7f5b      	ldrb	r3, [r3, #29]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0204 	orr.w	r2, r2, #4
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	e007      	b.n	8001e9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0204 	bic.w	r2, r2, #4
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff4c 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205e:	f7ff ff61 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002062:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7ff ffb1 	bl	8001fd0 <NVIC_EncodePriority>
 800206e:	4602      	mov	r2, r0
 8002070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff80 	bl	8001f7c <__NVIC_SetPriority>
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff54 	bl	8001f40 <__NVIC_EnableIRQ>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fe0e 	bl	8001ccc <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e099      	b.n	80021f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020dc:	e00f      	b.n	80020fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020de:	f7ff fdf5 	bl	8001ccc <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d908      	bls.n	80020fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e078      	b.n	80021f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e8      	bne.n	80020de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_DMA_Init+0x158>)
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b04      	cmp	r3, #4
 8002156:	d107      	bne.n	8002168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4313      	orrs	r3, r2
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0307 	bic.w	r3, r3, #7
 800217e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b04      	cmp	r3, #4
 8002190:	d117      	bne.n	80021c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa7b 	bl	80026a0 <DMA_CheckFifoParam>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021be:	2301      	movs	r3, #1
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa32 	bl	8002634 <DMA_CalcBaseAndBitshift>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	223f      	movs	r2, #63	; 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	f010803f 	.word	0xf010803f

080021fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800220a:	f7ff fd5f 	bl	8001ccc <HAL_GetTick>
 800220e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d008      	beq.n	800222e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e052      	b.n	80022d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0216 	bic.w	r2, r2, #22
 800223c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_DMA_Abort+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	e013      	b.n	80022a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002280:	f7ff fd24 	bl	8001ccc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b05      	cmp	r3, #5
 800228c:	d90c      	bls.n	80022a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e015      	b.n	80022d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e4      	bne.n	8002280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00c      	b.n	8002314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2205      	movs	r2, #5
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <HAL_DMA_IRQHandler+0x258>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a92      	ldr	r2, [pc, #584]	; (800257c <HAL_DMA_IRQHandler+0x25c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0204 	bic.w	r2, r2, #4
 8002372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2208      	movs	r2, #8
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2204      	movs	r2, #4
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2210      	movs	r2, #16
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2210      	movs	r2, #16
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e01f      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e016      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0208 	bic.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2220      	movs	r2, #32
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 808e 	beq.w	80025be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8086 	beq.w	80025be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2220      	movs	r2, #32
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d136      	bne.n	8002538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0216 	bic.w	r2, r2, #22
 80024d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_DMA_IRQHandler+0x1da>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	223f      	movs	r2, #63	; 0x3f
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d07d      	beq.n	800262a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
        }
        return;
 8002536:	e078      	b.n	800262a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01c      	beq.n	8002580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	2b00      	cmp	r3, #0
 800255a:	d030      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e02b      	b.n	80025be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d027      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
 8002576:	e022      	b.n	80025be <HAL_DMA_IRQHandler+0x29e>
 8002578:	20000000 	.word	0x20000000
 800257c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0210 	bic.w	r2, r2, #16
 800259c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d032      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d307      	bcc.n	8002606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <HAL_DMA_IRQHandler+0x2ca>
 8002604:	e000      	b.n	8002608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002606:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
 8002628:	e000      	b.n	800262c <HAL_DMA_IRQHandler+0x30c>
        return;
 800262a:	bf00      	nop
    }
  }
}
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop

08002634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b10      	subs	r3, #16
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <DMA_CalcBaseAndBitshift+0x64>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <DMA_CalcBaseAndBitshift+0x68>)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d909      	bls.n	8002676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	1d1a      	adds	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	; 0x58
 8002674:	e007      	b.n	8002686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	aaaaaaab 	.word	0xaaaaaaab
 800269c:	08007f18 	.word	0x08007f18

080026a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11f      	bne.n	80026fa <DMA_CheckFifoParam+0x5a>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d856      	bhi.n	800276e <DMA_CheckFifoParam+0xce>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <DMA_CheckFifoParam+0x28>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026eb 	.word	0x080026eb
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	0800276f 	.word	0x0800276f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d046      	beq.n	8002772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e043      	b.n	8002772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f2:	d140      	bne.n	8002776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e03d      	b.n	8002776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	d121      	bne.n	8002748 <DMA_CheckFifoParam+0xa8>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d837      	bhi.n	800277a <DMA_CheckFifoParam+0xda>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <DMA_CheckFifoParam+0x70>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002721 	.word	0x08002721
 8002714:	08002727 	.word	0x08002727
 8002718:	08002721 	.word	0x08002721
 800271c:	08002739 	.word	0x08002739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e030      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d025      	beq.n	800277e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002736:	e022      	b.n	800277e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002746:	e01c      	b.n	8002782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d903      	bls.n	8002756 <DMA_CheckFifoParam+0xb6>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d003      	beq.n	800275c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002754:	e018      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      break;
 800275a:	e015      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e00b      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 800276e:	bf00      	nop
 8002770:	e00a      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e008      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e006      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 800277a:	bf00      	nop
 800277c:	e004      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;   
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
    }
  } 
  
  return status; 
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e177      	b.n	8002aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 8166 	bne.w	8002a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80c0 	beq.w	8002a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a65      	ldr	r2, [pc, #404]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <HAL_GPIO_Init+0x328>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d037      	beq.n	80029d6 <HAL_GPIO_Init+0x23e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_GPIO_Init+0x330>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_GPIO_Init+0x23a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d02b      	beq.n	80029ce <HAL_GPIO_Init+0x236>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_GPIO_Init+0x338>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d025      	beq.n	80029ca <HAL_GPIO_Init+0x232>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_GPIO_Init+0x33c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <HAL_GPIO_Init+0x22e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_GPIO_Init+0x340>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x22a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_GPIO_Init+0x344>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x348>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_GPIO_Init+0x34c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x350>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x21a>
 80029ae:	2309      	movs	r3, #9
 80029b0:	e012      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b2:	230a      	movs	r3, #10
 80029b4:	e010      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b6:	2308      	movs	r3, #8
 80029b8:	e00e      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	; (8002ac0 <HAL_GPIO_Init+0x328>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_GPIO_Init+0x354>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a44:	4a29      	ldr	r2, [pc, #164]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae84 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40022400 	.word	0x40022400
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e12b      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fb78 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b54:	f000 fdac 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8002b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a81      	ldr	r2, [pc, #516]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d807      	bhi.n	8002b74 <HAL_I2C_Init+0x84>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a80      	ldr	r2, [pc, #512]	; (8002d68 <HAL_I2C_Init+0x278>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e006      	b.n	8002b82 <HAL_I2C_Init+0x92>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a7d      	ldr	r2, [pc, #500]	; (8002d6c <HAL_I2C_Init+0x27c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bf94      	ite	ls
 8002b7c:	2301      	movls	r3, #1
 8002b7e:	2300      	movhi	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0e7      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a78      	ldr	r2, [pc, #480]	; (8002d70 <HAL_I2C_Init+0x280>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0c9b      	lsrs	r3, r3, #18
 8002b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d802      	bhi.n	8002bc4 <HAL_I2C_Init+0xd4>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	e009      	b.n	8002bd8 <HAL_I2C_Init+0xe8>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_I2C_Init+0x284>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	495c      	ldr	r1, [pc, #368]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d819      	bhi.n	8002c2c <HAL_I2C_Init+0x13c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e59      	subs	r1, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_I2C_Init+0x138>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e59      	subs	r1, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	e051      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e04f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <HAL_I2C_Init+0x168>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e012      	b.n	8002c7e <HAL_I2C_Init+0x18e>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Init+0x196>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e022      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <HAL_I2C_Init+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e58      	subs	r0, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	440b      	add	r3, r1
 8002c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6809      	ldr	r1, [r1, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6911      	ldr	r1, [r2, #16]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	4311      	orrs	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	000186a0 	.word	0x000186a0
 8002d68:	001e847f 	.word	0x001e847f
 8002d6c:	003d08ff 	.word	0x003d08ff
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	10624dd3 	.word	0x10624dd3

08002d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d129      	bne.n	8002de2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2224      	movs	r2, #36	; 0x24
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0210 	bic.w	r2, r2, #16
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d12a      	bne.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2224      	movs	r2, #36	; 0x24
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e2a:	89fb      	ldrh	r3, [r7, #14]
 8002e2c:	f023 030f 	bic.w	r3, r3, #15
 8002e30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	89fa      	ldrh	r2, [r7, #14]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e264      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	4ba3      	ldr	r3, [pc, #652]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4ba0      	ldr	r3, [pc, #640]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b9d      	ldr	r3, [pc, #628]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b99      	ldr	r3, [pc, #612]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e23f      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b91      	ldr	r3, [pc, #580]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a90      	ldr	r2, [pc, #576]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b8b      	ldr	r3, [pc, #556]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a8a      	ldr	r2, [pc, #552]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a87      	ldr	r2, [pc, #540]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b84      	ldr	r3, [pc, #528]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a83      	ldr	r2, [pc, #524]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b81      	ldr	r3, [pc, #516]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a80      	ldr	r2, [pc, #512]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fed0 	bl	8001ccc <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fecc 	bl	8001ccc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e204      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe febc 	bl	8001ccc <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe feb8 	bl	8001ccc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f0      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	4b65      	ldr	r3, [pc, #404]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b5c      	ldr	r3, [pc, #368]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c4      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b56      	ldr	r3, [pc, #344]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4952      	ldr	r1, [pc, #328]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <HAL_RCC_OscConfig+0x2b0>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fe71 	bl	8001ccc <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fe6d 	bl	8001ccc <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a5      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4940      	ldr	r1, [pc, #256]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0x2b0>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fe50 	bl	8001ccc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fe4c 	bl	8001ccc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e184      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d030      	beq.n	80030bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_OscConfig+0x2b4>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fe fe30 	bl	8001ccc <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fe2c 	bl	8001ccc <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e164      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e015      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x2b4>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fe19 	bl	8001ccc <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fe15 	bl	8001ccc <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e14d      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a0 	beq.w	800320a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_OscConfig+0x2b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d121      	bne.n	800314a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x2b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_RCC_OscConfig+0x2b8>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7fe fddb 	bl	8001ccc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e011      	b.n	800313e <HAL_RCC_OscConfig+0x2ce>
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	42470000 	.word	0x42470000
 8003124:	42470e80 	.word	0x42470e80
 8003128:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312c:	f7fe fdce 	bl	8001ccc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e106      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_RCC_OscConfig+0x4e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d106      	bne.n	8003160 <HAL_RCC_OscConfig+0x2f0>
 8003152:	4b81      	ldr	r3, [pc, #516]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a80      	ldr	r2, [pc, #512]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	e01c      	b.n	800319a <HAL_RCC_OscConfig+0x32a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d10c      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003168:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a7a      	ldr	r2, [pc, #488]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	4b78      	ldr	r3, [pc, #480]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a77      	ldr	r2, [pc, #476]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	e00b      	b.n	800319a <HAL_RCC_OscConfig+0x32a>
 8003182:	4b75      	ldr	r3, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a74      	ldr	r2, [pc, #464]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	4b72      	ldr	r3, [pc, #456]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a71      	ldr	r2, [pc, #452]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003194:	f023 0304 	bic.w	r3, r3, #4
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d015      	beq.n	80031ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe fd93 	bl	8001ccc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fd8f 	bl	8001ccc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0c5      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c0:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ee      	beq.n	80031aa <HAL_RCC_OscConfig+0x33a>
 80031cc:	e014      	b.n	80031f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fe fd7d 	bl	8001ccc <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fd79 	bl	8001ccc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0af      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ec:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ee      	bne.n	80031d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a55      	ldr	r2, [pc, #340]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 809b 	beq.w	800334a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d05c      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d141      	bne.n	80032ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003228:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_RCC_OscConfig+0x4ec>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fe fd4d 	bl	8001ccc <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe fd49 	bl	8001ccc <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e081      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003248:	4b43      	ldr	r3, [pc, #268]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	061b      	lsls	r3, r3, #24
 8003278:	4937      	ldr	r1, [pc, #220]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <HAL_RCC_OscConfig+0x4ec>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fd22 	bl	8001ccc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fd1e 	bl	8001ccc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e056      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x41c>
 80032aa:	e04e      	b.n	800334a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fd0b 	bl	8001ccc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe fd07 	bl	8001ccc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03f      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x44a>
 80032d8:	e037      	b.n	800334a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e032      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d028      	beq.n	8003346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d121      	bne.n	8003346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d11a      	bne.n	8003346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003316:	4013      	ands	r3, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40007000 	.word	0x40007000
 8003358:	40023800 	.word	0x40023800
 800335c:	42470060 	.word	0x42470060

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fc3c 	bl	8001ccc <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fc38 	bl	8001ccc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe faa6 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08007f00 	.word	0x08007f00
 8003524:	20000000 	.word	0x20000000
 8003528:	20000004 	.word	0x20000004

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003532:	2100      	movs	r1, #0
 8003534:	6079      	str	r1, [r7, #4]
 8003536:	2100      	movs	r1, #0
 8003538:	60f9      	str	r1, [r7, #12]
 800353a:	2100      	movs	r1, #0
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800353e:	2100      	movs	r1, #0
 8003540:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4952      	ldr	r1, [pc, #328]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 8003544:	6889      	ldr	r1, [r1, #8]
 8003546:	f001 010c 	and.w	r1, r1, #12
 800354a:	2908      	cmp	r1, #8
 800354c:	d00d      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0x3e>
 800354e:	2908      	cmp	r1, #8
 8003550:	f200 8094 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x150>
 8003554:	2900      	cmp	r1, #0
 8003556:	d002      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x32>
 8003558:	2904      	cmp	r1, #4
 800355a:	d003      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x38>
 800355c:	e08e      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCC_GetSysClockFreq+0x164>)
 8003560:	60bb      	str	r3, [r7, #8]
       break;
 8003562:	e08e      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_GetSysClockFreq+0x168>)
 8003566:	60bb      	str	r3, [r7, #8]
      break;
 8003568:	e08b      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356a:	4948      	ldr	r1, [pc, #288]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 800356c:	6849      	ldr	r1, [r1, #4]
 800356e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003572:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003574:	4945      	ldr	r1, [pc, #276]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 8003576:	6849      	ldr	r1, [r1, #4]
 8003578:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800357c:	2900      	cmp	r1, #0
 800357e:	d024      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4942      	ldr	r1, [pc, #264]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 8003582:	6849      	ldr	r1, [r1, #4]
 8003584:	0989      	lsrs	r1, r1, #6
 8003586:	4608      	mov	r0, r1
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003590:	f04f 0500 	mov.w	r5, #0
 8003594:	ea00 0204 	and.w	r2, r0, r4
 8003598:	ea01 0305 	and.w	r3, r1, r5
 800359c:	493d      	ldr	r1, [pc, #244]	; (8003694 <HAL_RCC_GetSysClockFreq+0x168>)
 800359e:	fb01 f003 	mul.w	r0, r1, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	fb01 f102 	mul.w	r1, r1, r2
 80035a8:	1844      	adds	r4, r0, r1
 80035aa:	493a      	ldr	r1, [pc, #232]	; (8003694 <HAL_RCC_GetSysClockFreq+0x168>)
 80035ac:	fba2 0101 	umull	r0, r1, r2, r1
 80035b0:	1863      	adds	r3, r4, r1
 80035b2:	4619      	mov	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f7fc fe18 	bl	80001f0 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4613      	mov	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e04a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	461a      	mov	r2, r3
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	ea02 0400 	and.w	r4, r2, r0
 80035e2:	ea03 0501 	and.w	r5, r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	014b      	lsls	r3, r1, #5
 80035f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035f8:	0142      	lsls	r2, r0, #5
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	1b00      	subs	r0, r0, r4
 8003600:	eb61 0105 	sbc.w	r1, r1, r5
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	018b      	lsls	r3, r1, #6
 800360e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003612:	0182      	lsls	r2, r0, #6
 8003614:	1a12      	subs	r2, r2, r0
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	f04f 0000 	mov.w	r0, #0
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	00d9      	lsls	r1, r3, #3
 8003624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003628:	00d0      	lsls	r0, r2, #3
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	1912      	adds	r2, r2, r4
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	0299      	lsls	r1, r3, #10
 800363e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003642:	0290      	lsls	r0, r2, #10
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f7fc fdcc 	bl	80001f0 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_RCC_GetSysClockFreq+0x160>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	60bb      	str	r3, [r7, #8]
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RCC_GetSysClockFreq+0x164>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bdb0      	pop	{r4, r5, r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	00f42400 	.word	0x00f42400
 8003694:	017d7840 	.word	0x017d7840

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff0 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0a9b      	lsrs	r3, r3, #10
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08007f10 	.word	0x08007f10

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036dc:	f7ff ffdc 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0b5b      	lsrs	r3, r3, #13
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	08007f10 	.word	0x08007f10

08003700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	220f      	movs	r2, #15
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_GetClockConfig+0x5c>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_GetClockConfig+0x5c>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_GetClockConfig+0x5c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_GetClockConfig+0x5c>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	08db      	lsrs	r3, r3, #3
 800373a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_RCC_GetClockConfig+0x60>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	40023c00 	.word	0x40023c00

08003764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07b      	b.n	800386e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003786:	d009      	beq.n	800379c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
 800378e:	e005      	b.n	800379c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fd70 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	f003 0104 	and.w	r1, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 0210 	and.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e041      	b.n	800390c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f839 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fae9 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d001      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04e      	b.n	80039de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <HAL_TIM_Base_Start_IT+0xc4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d01d      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d018      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d010      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	e007      	b.n	80039dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40001800 	.word	0x40001800

08003a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e041      	b.n	8003a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fc7c 	bl	800132c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fa20 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d122      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0202 	mvn.w	r2, #2
 8003ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9b1 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003aee:	e005      	b.n	8003afc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9a3 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9b4 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d122      	bne.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d11b      	bne.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0204 	mvn.w	r2, #4
 8003b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f987 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003b42:	e005      	b.n	8003b50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f979 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f98a 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d122      	bne.n	8003baa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11b      	bne.n	8003baa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0208 	mvn.w	r2, #8
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f95d 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003b96:	e005      	b.n	8003ba4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f94f 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f960 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d122      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d11b      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f06f 0210 	mvn.w	r2, #16
 8003bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f933 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003bea:	e005      	b.n	8003bf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f925 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f936 	bl	8003e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10e      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f06f 0201 	mvn.w	r2, #1
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fd f9ed 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fbf1 	bl	8004438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d10e      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8fb 	bl	8003e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d10e      	bne.n	8003cae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d107      	bne.n	8003cae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0220 	mvn.w	r2, #32
 8003ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fbbb 	bl	8004424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0ae      	b.n	8003e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	f200 809f 	bhi.w	8003e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003e25 	.word	0x08003e25
 8003cf4:	08003e25 	.word	0x08003e25
 8003cf8:	08003e25 	.word	0x08003e25
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003e25 	.word	0x08003e25
 8003d04:	08003e25 	.word	0x08003e25
 8003d08:	08003e25 	.word	0x08003e25
 8003d0c:	08003da3 	.word	0x08003da3
 8003d10:	08003e25 	.word	0x08003e25
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	08003e25 	.word	0x08003e25
 8003d1c:	08003de3 	.word	0x08003de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f950 	bl	8003fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
      break;
 8003d5e:	e064      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f9a0 	bl	80040ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
      break;
 8003da0:	e043      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f9f5 	bl	8004198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0208 	orr.w	r2, r2, #8
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      break;
 8003de0:	e023      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fa49 	bl	8004280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	021a      	lsls	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <TIM_Base_SetConfig+0x118>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <TIM_Base_SetConfig+0x11c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	; (8003fac <TIM_Base_SetConfig+0x120>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d027      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <TIM_Base_SetConfig+0x118>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d023      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <TIM_Base_SetConfig+0x11c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <TIM_Base_SetConfig+0x120>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d017      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <TIM_Base_SetConfig+0x128>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <TIM_Base_SetConfig+0x12c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00f      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <TIM_Base_SetConfig+0x130>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00b      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <TIM_Base_SetConfig+0x134>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <TIM_Base_SetConfig+0x138>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <TIM_Base_SetConfig+0x13c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d108      	bne.n	8003f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0xf8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <TIM_Base_SetConfig+0x124>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800
 8003fc0:	40001800 	.word	0x40001800
 8003fc4:	40001c00 	.word	0x40001c00
 8003fc8:	40002000 	.word	0x40002000

08003fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 0302 	bic.w	r3, r3, #2
 8004014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <TIM_OC1_SetConfig+0xd8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC1_SetConfig+0x64>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <TIM_OC1_SetConfig+0xdc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0308 	bic.w	r3, r3, #8
 8004036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <TIM_OC1_SetConfig+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC1_SetConfig+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <TIM_OC1_SetConfig+0xdc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40010400 	.word	0x40010400

080040ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0320 	bic.w	r3, r3, #32
 80040f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0x68>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a21      	ldr	r2, [pc, #132]	; (8004194 <TIM_OC2_SetConfig+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10d      	bne.n	8004130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <TIM_OC2_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0x94>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <TIM_OC2_SetConfig+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d113      	bne.n	8004168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400

08004198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <TIM_OC3_SetConfig+0xe0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x66>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <TIM_OC3_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10d      	bne.n	800421a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <TIM_OC3_SetConfig+0xe0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0x92>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <TIM_OC3_SetConfig+0xe4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <TIM_OC4_SetConfig+0xa4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC4_SetConfig+0x68>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a11      	ldr	r2, [pc, #68]	; (8004328 <TIM_OC4_SetConfig+0xa8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d109      	bne.n	80042fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400

0800432c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e05a      	b.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d01d      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10c      	bne.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40001800 	.word	0x40001800

08004424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e03f      	b.n	80044de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd f8e8 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fc7b 	bl	8004d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b0ba      	sub	sp, #232	; 0xe8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb65 	bl	8004c16 <UART_Receive_IT>
      return;
 800454c:	e256      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80de 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80d1 	beq.w	8004714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
 800457e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
 80045a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d011      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0208 	orr.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 81ed 	beq.w	80049f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 faf0 	bl	8004c16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_UART_IRQHandler+0x17a>
 800465a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04f      	beq.n	8004702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9f8 	bl	8004a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d141      	bne.n	80046fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800468c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1d9      	bne.n	8004676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <HAL_UART_IRQHandler+0x3dc>)
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fd fe00 	bl	80022dc <HAL_DMA_Abort_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ec:	4610      	mov	r0, r2
 80046ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00e      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f99a 	bl	8004a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e00a      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f996 	bl	8004a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e006      	b.n	8004710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f992 	bl	8004a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800470e:	e170      	b.n	80049f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	bf00      	nop
    return;
 8004712:	e16e      	b.n	80049f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 814a 	bne.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8143 	beq.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 813c 	beq.w	80049b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	f040 80b4 	bne.w	80048c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800476c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8140 	beq.w	80049f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477e:	429a      	cmp	r2, r3
 8004780:	f080 8139 	bcs.w	80049f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	f000 8088 	beq.w	80048aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1d9      	bne.n	800479a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800480a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800481c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e1      	bne.n	80047e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800484c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e3      	bne.n	8004822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	f023 0310 	bic.w	r3, r3, #16
 800487e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800488c:	65ba      	str	r2, [r7, #88]	; 0x58
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e3      	bne.n	8004868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fca9 	bl	80021fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8c0 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048c0:	e099      	b.n	80049f6 <HAL_UART_IRQHandler+0x50e>
 80048c2:	bf00      	nop
 80048c4:	08004b1f 	.word	0x08004b1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 808b 	beq.w	80049fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8086 	beq.w	80049fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004912:	647a      	str	r2, [r7, #68]	; 0x44
 8004914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e3      	bne.n	80048ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	623b      	str	r3, [r7, #32]
   return(result);
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800494a:	633a      	str	r2, [r7, #48]	; 0x30
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	60fb      	str	r3, [r7, #12]
   return(result);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0310 	bic.w	r3, r3, #16
 8004982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004990:	61fa      	str	r2, [r7, #28]
 8004992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	617b      	str	r3, [r7, #20]
   return(result);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f848 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b0:	e023      	b.n	80049fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_UART_IRQHandler+0x4ea>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8bb 	bl	8004b46 <UART_Transmit_IT>
    return;
 80049d0:	e014      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <HAL_UART_IRQHandler+0x514>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8fb 	bl	8004be6 <UART_EndTransmit_IT>
    return;
 80049f0:	e004      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
    return;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
      return;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_UART_IRQHandler+0x514>
      return;
 80049fa:	bf00      	nop
  }
}
 80049fc:	37e8      	adds	r7, #232	; 0xe8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b095      	sub	sp, #84	; 0x54
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a80:	643a      	str	r2, [r7, #64]	; 0x40
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d119      	bne.n	8004b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0310 	bic.w	r3, r3, #16
 8004ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af0:	61ba      	str	r2, [r7, #24]
 8004af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6979      	ldr	r1, [r7, #20]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	613b      	str	r3, [r7, #16]
   return(result);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b12:	bf00      	nop
 8004b14:	3754      	adds	r7, #84	; 0x54
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ff77 	bl	8004a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b21      	cmp	r3, #33	; 0x21
 8004b58:	d13e      	bne.n	8004bd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	d114      	bne.n	8004b8e <UART_Transmit_IT+0x48>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d110      	bne.n	8004b8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	1c9a      	adds	r2, r3, #2
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	621a      	str	r2, [r3, #32]
 8004b8c:	e008      	b.n	8004ba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6211      	str	r1, [r2, #32]
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4619      	mov	r1, r3
 8004bae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fefc 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b08c      	sub	sp, #48	; 0x30
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b22      	cmp	r3, #34	; 0x22
 8004c28:	f040 80ab 	bne.w	8004d82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d117      	bne.n	8004c66 <UART_Receive_IT+0x50>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d113      	bne.n	8004c66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
 8004c64:	e026      	b.n	8004cb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d007      	beq.n	8004c8a <UART_Receive_IT+0x74>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <UART_Receive_IT+0x82>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e008      	b.n	8004caa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d15a      	bne.n	8004d7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0220 	bic.w	r2, r2, #32
 8004cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d135      	bne.n	8004d74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f023 0310 	bic.w	r3, r3, #16
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	623a      	str	r2, [r7, #32]
 8004d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	69f9      	ldr	r1, [r7, #28]
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e5      	bne.n	8004d0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d10a      	bne.n	8004d66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fe67 	bl	8004a40 <HAL_UARTEx_RxEventCallback>
 8004d72:	e002      	b.n	8004d7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fe4f 	bl	8004a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e002      	b.n	8004d84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	; 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	b09f      	sub	sp, #124	; 0x7c
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	68d9      	ldr	r1, [r3, #12]
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	ea40 0301 	orr.w	r3, r0, r1
 8004dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dd0:	f021 010c 	bic.w	r1, r1, #12
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	6999      	ldr	r1, [r3, #24]
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	ea40 0301 	orr.w	r3, r0, r1
 8004df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4bc5      	ldr	r3, [pc, #788]	; (8005110 <UART_SetConfig+0x384>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d004      	beq.n	8004e0a <UART_SetConfig+0x7e>
 8004e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4bc3      	ldr	r3, [pc, #780]	; (8005114 <UART_SetConfig+0x388>)
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d103      	bne.n	8004e12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e0a:	f7fe fc65 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004e0e:	6778      	str	r0, [r7, #116]	; 0x74
 8004e10:	e002      	b.n	8004e18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e12:	f7fe fc4d 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004e16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	f040 80b6 	bne.w	8004f90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e26:	461c      	mov	r4, r3
 8004e28:	f04f 0500 	mov.w	r5, #0
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	6439      	str	r1, [r7, #64]	; 0x40
 8004e34:	415b      	adcs	r3, r3
 8004e36:	647b      	str	r3, [r7, #68]	; 0x44
 8004e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e3c:	1912      	adds	r2, r2, r4
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	00d9      	lsls	r1, r3, #3
 8004e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e50:	00d0      	lsls	r0, r2, #3
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1911      	adds	r1, r2, r4
 8004e58:	6639      	str	r1, [r7, #96]	; 0x60
 8004e5a:	416b      	adcs	r3, r5
 8004e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	1891      	adds	r1, r2, r2
 8004e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e6c:	415b      	adcs	r3, r3
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e78:	f7fb f9ba 	bl	80001f0 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4ba5      	ldr	r3, [pc, #660]	; (8005118 <UART_SetConfig+0x38c>)
 8004e82:	fba3 2302 	umull	r2, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	011e      	lsls	r6, r3, #4
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	f04f 0500 	mov.w	r5, #0
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	6339      	str	r1, [r7, #48]	; 0x30
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ea2:	1912      	adds	r2, r2, r4
 8004ea4:	eb45 0303 	adc.w	r3, r5, r3
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	00d9      	lsls	r1, r3, #3
 8004eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eb6:	00d0      	lsls	r0, r2, #3
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	1911      	adds	r1, r2, r4
 8004ebe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ec0:	416b      	adcs	r3, r5
 8004ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	1891      	adds	r1, r2, r2
 8004ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ed2:	415b      	adcs	r3, r3
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ede:	f7fb f987 	bl	80001f0 <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <UART_SetConfig+0x38c>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a87      	ldr	r2, [pc, #540]	; (8005118 <UART_SetConfig+0x38c>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f08:	441e      	add	r6, r3
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	1894      	adds	r4, r2, r2
 8004f18:	623c      	str	r4, [r7, #32]
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f22:	1812      	adds	r2, r2, r0
 8004f24:	eb41 0303 	adc.w	r3, r1, r3
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	f04f 0500 	mov.w	r5, #0
 8004f30:	00dd      	lsls	r5, r3, #3
 8004f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f36:	00d4      	lsls	r4, r2, #3
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	1814      	adds	r4, r2, r0
 8004f3e:	653c      	str	r4, [r7, #80]	; 0x50
 8004f40:	414b      	adcs	r3, r1
 8004f42:	657b      	str	r3, [r7, #84]	; 0x54
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	61b9      	str	r1, [r7, #24]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f5e:	f7fb f947 	bl	80001f0 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b6c      	ldr	r3, [pc, #432]	; (8005118 <UART_SetConfig+0x38c>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	; 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a67      	ldr	r2, [pc, #412]	; (8005118 <UART_SetConfig+0x38c>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 0207 	and.w	r2, r3, #7
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4432      	add	r2, r6
 8004f8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f8e:	e0b9      	b.n	8005104 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f92:	461c      	mov	r4, r3
 8004f94:	f04f 0500 	mov.w	r5, #0
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	6139      	str	r1, [r7, #16]
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fa8:	1912      	adds	r2, r2, r4
 8004faa:	eb45 0303 	adc.w	r3, r5, r3
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	00d9      	lsls	r1, r3, #3
 8004fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fbc:	00d0      	lsls	r0, r2, #3
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	eb12 0804 	adds.w	r8, r2, r4
 8004fc6:	eb43 0905 	adc.w	r9, r3, r5
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f04f 0100 	mov.w	r1, #0
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	008b      	lsls	r3, r1, #2
 8004fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fe2:	0082      	lsls	r2, r0, #2
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	f7fb f902 	bl	80001f0 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <UART_SetConfig+0x38c>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	011e      	lsls	r6, r3, #4
 8004ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	1894      	adds	r4, r2, r2
 8005008:	60bc      	str	r4, [r7, #8]
 800500a:	415b      	adcs	r3, r3
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005012:	1812      	adds	r2, r2, r0
 8005014:	eb41 0303 	adc.w	r3, r1, r3
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	f04f 0500 	mov.w	r5, #0
 8005020:	00dd      	lsls	r5, r3, #3
 8005022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005026:	00d4      	lsls	r4, r2, #3
 8005028:	4622      	mov	r2, r4
 800502a:	462b      	mov	r3, r5
 800502c:	1814      	adds	r4, r2, r0
 800502e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005030:	414b      	adcs	r3, r1
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	008b      	lsls	r3, r1, #2
 8005048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800504c:	0082      	lsls	r2, r0, #2
 800504e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005052:	f7fb f8cd 	bl	80001f0 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <UART_SetConfig+0x38c>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	; 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <UART_SetConfig+0x38c>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507a:	441e      	add	r6, r3
 800507c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507e:	4618      	mov	r0, r3
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	1894      	adds	r4, r2, r2
 800508a:	603c      	str	r4, [r7, #0]
 800508c:	415b      	adcs	r3, r3
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005094:	1812      	adds	r2, r2, r0
 8005096:	eb41 0303 	adc.w	r3, r1, r3
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	f04f 0500 	mov.w	r5, #0
 80050a2:	00dd      	lsls	r5, r3, #3
 80050a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050a8:	00d4      	lsls	r4, r2, #3
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	eb12 0a00 	adds.w	sl, r2, r0
 80050b2:	eb43 0b01 	adc.w	fp, r3, r1
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	008b      	lsls	r3, r1, #2
 80050ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050ce:	0082      	lsls	r2, r0, #2
 80050d0:	4650      	mov	r0, sl
 80050d2:	4659      	mov	r1, fp
 80050d4:	f7fb f88c 	bl	80001f0 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <UART_SetConfig+0x38c>)
 80050de:	fba3 1302 	umull	r1, r3, r3, r2
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	2164      	movs	r1, #100	; 0x64
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	3332      	adds	r3, #50	; 0x32
 80050f0:	4a09      	ldr	r2, [pc, #36]	; (8005118 <UART_SetConfig+0x38c>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4432      	add	r2, r6
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	377c      	adds	r7, #124	; 0x7c
 8005108:	46bd      	mov	sp, r7
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	bf00      	nop
 8005110:	40011000 	.word	0x40011000
 8005114:	40011400 	.word	0x40011400
 8005118:	51eb851f 	.word	0x51eb851f

0800511c <__NVIC_SetPriority>:
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db0a      	blt.n	8005146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	490c      	ldr	r1, [pc, #48]	; (8005168 <__NVIC_SetPriority+0x4c>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	440b      	add	r3, r1
 8005140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005144:	e00a      	b.n	800515c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <__NVIC_SetPriority+0x50>)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3b04      	subs	r3, #4
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	440b      	add	r3, r1
 800515a:	761a      	strb	r2, [r3, #24]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000e100 	.word	0xe000e100
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <SysTick_Handler+0x1c>)
 8005176:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005178:	f001 fd28 	bl	8006bcc <xTaskGetSchedulerState>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d001      	beq.n	8005186 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005182:	f002 fb11 	bl	80077a8 <xPortSysTickHandler>
  }
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	e000e010 	.word	0xe000e010

08005190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005194:	2100      	movs	r1, #0
 8005196:	f06f 0004 	mvn.w	r0, #4
 800519a:	f7ff ffbf 	bl	800511c <__NVIC_SetPriority>
#endif
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051aa:	f3ef 8305 	mrs	r3, IPSR
 80051ae:	603b      	str	r3, [r7, #0]
  return(result);
 80051b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051b6:	f06f 0305 	mvn.w	r3, #5
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	e00c      	b.n	80051d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <osKernelInitialize+0x44>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d105      	bne.n	80051d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051c6:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <osKernelInitialize+0x44>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e002      	b.n	80051d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051d8:	687b      	ldr	r3, [r7, #4]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	200005ec 	.word	0x200005ec

080051ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f2:	f3ef 8305 	mrs	r3, IPSR
 80051f6:	603b      	str	r3, [r7, #0]
  return(result);
 80051f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e010      	b.n	8005228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <osKernelStart+0x48>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d109      	bne.n	8005222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800520e:	f7ff ffbf 	bl	8005190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <osKernelStart+0x48>)
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005218:	f001 f87c 	bl	8006314 <vTaskStartScheduler>
      stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e002      	b.n	8005228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200005ec 	.word	0x200005ec

08005238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af04      	add	r7, sp, #16
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005248:	f3ef 8305 	mrs	r3, IPSR
 800524c:	617b      	str	r3, [r7, #20]
  return(result);
 800524e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005250:	2b00      	cmp	r3, #0
 8005252:	d17e      	bne.n	8005352 <osThreadNew+0x11a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d07b      	beq.n	8005352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800525e:	2318      	movs	r3, #24
 8005260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d045      	beq.n	80052fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <osThreadNew+0x48>
        name = attr->name;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <osThreadNew+0x6e>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b38      	cmp	r3, #56	; 0x38
 8005298:	d805      	bhi.n	80052a6 <osThreadNew+0x6e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <osThreadNew+0x72>
        return (NULL);
 80052a6:	2300      	movs	r3, #0
 80052a8:	e054      	b.n	8005354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <osThreadNew+0xa8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2bbb      	cmp	r3, #187	; 0xbb
 80052c8:	d90a      	bls.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osThreadNew+0xa8>
        mem = 1;
 80052da:	2301      	movs	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e010      	b.n	8005302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <osThreadNew+0xca>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <osThreadNew+0xca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <osThreadNew+0xca>
          mem = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e001      	b.n	8005302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005310:	9202      	str	r2, [sp, #8]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fe0c 	bl	8005f3c <xTaskCreateStatic>
 8005324:	4603      	mov	r3, r0
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	e013      	b.n	8005352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	b29a      	uxth	r2, r3
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fe57 	bl	8005ff6 <xTaskCreate>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <osThreadNew+0x11a>
            hTask = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	; 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005364:	f3ef 8305 	mrs	r3, IPSR
 8005368:	60bb      	str	r3, [r7, #8]
  return(result);
 800536a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <osDelay+0x1c>
    stat = osErrorISR;
 8005370:	f06f 0305 	mvn.w	r3, #5
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e007      	b.n	8005388 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 ff92 	bl	80062ac <vTaskDelay>
    }
  }

  return (stat);
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80053a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <vApplicationGetIdleTaskMemory+0x30>)
 80053aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200005f0 	.word	0x200005f0
 80053c4:	200006ac 	.word	0x200006ac

080053c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80053d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <vApplicationGetTimerTaskMemory+0x30>)
 80053de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	200008ac 	.word	0x200008ac
 80053f8:	20000968 	.word	0x20000968

080053fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 0208 	add.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 0208 	add.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f103 0208 	add.w	r2, r3, #8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b4:	d103      	bne.n	80054be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00c      	b.n	80054d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3308      	adds	r3, #8
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <vListInsert+0x2e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d2f6      	bcs.n	80054c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6852      	ldr	r2, [r2, #4]
 8005530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d103      	bne.n	8005544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800558e:	f002 f879 	bl	8007684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	441a      	add	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	3b01      	subs	r3, #1
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d114      	bne.n	800560e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3310      	adds	r3, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f929 	bl	8006848 <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <xQueueGenericReset+0xcc>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e009      	b.n	8005622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fef2 	bl	80053fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff feed 	bl	80053fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f002 f85f 	bl	80076e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xQueueGenericCreateStatic+0x52>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xQueueGenericCreateStatic+0x56>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericCreateStatic+0x58>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueGenericCreateStatic+0x7e>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericCreateStatic+0x82>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericCreateStatic+0x84>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056d2:	2350      	movs	r3, #80	; 0x50
 80056d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d00a      	beq.n	80056f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f805 	bl	8005724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e002      	b.n	8005746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005752:	2101      	movs	r1, #1
 8005754:	69b8      	ldr	r0, [r7, #24]
 8005756:	f7ff ff05 	bl	8005564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08e      	sub	sp, #56	; 0x38
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGenericSend+0x32>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <xQueueGenericSend+0x40>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <xQueueGenericSend+0x44>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <xQueueGenericSend+0x46>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xQueueGenericSend+0x60>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d103      	bne.n	80057da <xQueueGenericSend+0x6e>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <xQueueGenericSend+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueGenericSend+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueGenericSend+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	623b      	str	r3, [r7, #32]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057fa:	f001 f9e7 	bl	8006bcc <xTaskGetSchedulerState>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xQueueGenericSend+0x9e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <xQueueGenericSend+0xa2>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <xQueueGenericSend+0xa4>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <xQueueGenericSend+0xbe>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	61fb      	str	r3, [r7, #28]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800582a:	f001 ff2b 	bl	8007684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <xQueueGenericSend+0xd4>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d129      	bne.n	8005894 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fa0b 	bl	8005c60 <prvCopyDataToQueue>
 800584a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	3324      	adds	r3, #36	; 0x24
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fff5 	bl	8006848 <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005864:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <xQueueGenericSend+0x1f8>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	e00a      	b.n	800588c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <xQueueGenericSend+0x1f8>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800588c:	f001 ff2a 	bl	80076e4 <vPortExitCritical>
				return pdPASS;
 8005890:	2301      	movs	r3, #1
 8005892:	e063      	b.n	800595c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800589a:	f001 ff23 	bl	80076e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	e05c      	b.n	800595c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f82f 	bl	8006910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058b6:	f001 ff15 	bl	80076e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ba:	f000 fd9b 	bl	80063f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058be:	f001 fee1 	bl	8007684 <vPortEnterCritical>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c8:	b25b      	sxtb	r3, r3
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ce:	d103      	bne.n	80058d8 <xQueueGenericSend+0x16c>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSend+0x182>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ee:	f001 fef9 	bl	80076e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 f81e 	bl	800693c <xTaskCheckForTimeOut>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d124      	bne.n	8005950 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005908:	f000 faa2 	bl	8005e50 <prvIsQueueFull>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	3310      	adds	r3, #16
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 ff44 	bl	80067a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005922:	f000 fa2d 	bl	8005d80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005926:	f000 fd73 	bl	8006410 <xTaskResumeAll>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f47f af7c 	bne.w	800582a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xQueueGenericSend+0x1f8>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e772      	b.n	800582a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005946:	f000 fa1b 	bl	8005d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594a:	f000 fd61 	bl	8006410 <xTaskResumeAll>
 800594e:	e76c      	b.n	800582a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005952:	f000 fa15 	bl	8005d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005956:	f000 fd5b 	bl	8006410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800595a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800595c:	4618      	mov	r0, r3
 800595e:	3738      	adds	r7, #56	; 0x38
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b090      	sub	sp, #64	; 0x40
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d103      	bne.n	80059a4 <xQueueGenericSendFromISR+0x3c>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <xQueueGenericSendFromISR+0x40>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <xQueueGenericSendFromISR+0x42>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <xQueueGenericSendFromISR+0x6a>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <xQueueGenericSendFromISR+0x6e>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xQueueGenericSendFromISR+0x70>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	623b      	str	r3, [r7, #32]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f2:	f001 ff29 	bl	8007848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059f6:	f3ef 8211 	mrs	r2, BASEPRI
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	61fa      	str	r2, [r7, #28]
 8005a0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <xQueueGenericSendFromISR+0xbc>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d12f      	bne.n	8005a84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a3a:	f000 f911 	bl	8005c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a46:	d112      	bne.n	8005a6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fef7 	bl	8006848 <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e007      	b.n	8005a7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a72:	3301      	adds	r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b25a      	sxtb	r2, r3
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a82:	e001      	b.n	8005a88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	; 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <xQueueReceive+0x30>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	623b      	str	r3, [r7, #32]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <xQueueReceive+0x3e>
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <xQueueReceive+0x42>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <xQueueReceive+0x44>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xQueueReceive+0x5e>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	61fb      	str	r3, [r7, #28]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afe:	f001 f865 	bl	8006bcc <xTaskGetSchedulerState>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <xQueueReceive+0x6e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <xQueueReceive+0x72>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueReceive+0x74>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueReceive+0x8e>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61bb      	str	r3, [r7, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b2e:	f001 fda9 	bl	8007684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01f      	beq.n	8005b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 f8f7 	bl	8005d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00f      	beq.n	8005b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	3310      	adds	r3, #16
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fe74 	bl	8006848 <xTaskRemoveFromEventList>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <xQueueReceive+0x1bc>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b76:	f001 fdb5 	bl	80076e4 <vPortExitCritical>
				return pdPASS;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e069      	b.n	8005c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b84:	f001 fdae 	bl	80076e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e062      	b.n	8005c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b92:	f107 0310 	add.w	r3, r7, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 feba 	bl	8006910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba0:	f001 fda0 	bl	80076e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba4:	f000 fc26 	bl	80063f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba8:	f001 fd6c 	bl	8007684 <vPortEnterCritical>
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb8:	d103      	bne.n	8005bc2 <xQueueReceive+0x122>
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bce:	d103      	bne.n	8005bd8 <xQueueReceive+0x138>
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd8:	f001 fd84 	bl	80076e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bdc:	1d3a      	adds	r2, r7, #4
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fea9 	bl	800693c <xTaskCheckForTimeOut>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d123      	bne.n	8005c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf2:	f000 f917 	bl	8005e24 <prvIsQueueEmpty>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	3324      	adds	r3, #36	; 0x24
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fdcf 	bl	80067a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0c:	f000 f8b8 	bl	8005d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c10:	f000 fbfe 	bl	8006410 <xTaskResumeAll>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d189      	bne.n	8005b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <xQueueReceive+0x1bc>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e780      	b.n	8005b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2e:	f000 f8a7 	bl	8005d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c32:	f000 fbed 	bl	8006410 <xTaskResumeAll>
 8005c36:	e77a      	b.n	8005b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3a:	f000 f8a1 	bl	8005d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c3e:	f000 fbe7 	bl	8006410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c44:	f000 f8ee 	bl	8005e24 <prvIsQueueEmpty>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f43f af6f 	beq.w	8005b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3730      	adds	r7, #48	; 0x30
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d14d      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ffbc 	bl	8006c08 <xTaskPriorityDisinherit>
 8005c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	e043      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d119      	bne.n	8005cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6858      	ldr	r0, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f002 f81c 	bl	8007ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d32b      	bcc.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e026      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68d8      	ldr	r0, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	f002 f802 	bl	8007ce8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	425b      	negs	r3, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d207      	bcs.n	8005d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	425b      	negs	r3, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d105      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	441a      	add	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d303      	bcc.n	8005d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	461a      	mov	r2, r3
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f001 ffb8 	bl	8007ce8 <memcpy>
	}
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d88:	f001 fc7c 	bl	8007684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d94:	e011      	b.n	8005dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d012      	beq.n	8005dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3324      	adds	r3, #36	; 0x24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd50 	bl	8006848 <xTaskRemoveFromEventList>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dae:	f000 fe27 	bl	8006a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dce9      	bgt.n	8005d96 <prvUnlockQueue+0x16>
 8005dc2:	e000      	b.n	8005dc6 <prvUnlockQueue+0x46>
					break;
 8005dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fc89 	bl	80076e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dd2:	f001 fc57 	bl	8007684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dde:	e011      	b.n	8005e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3310      	adds	r3, #16
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fd2b 	bl	8006848 <xTaskRemoveFromEventList>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005df8:	f000 fe02 	bl	8006a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dce9      	bgt.n	8005de0 <prvUnlockQueue+0x60>
 8005e0c:	e000      	b.n	8005e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	22ff      	movs	r2, #255	; 0xff
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e18:	f001 fc64 	bl	80076e4 <vPortExitCritical>
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e2c:	f001 fc2a 	bl	8007684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e001      	b.n	8005e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f001 fc4f 	bl	80076e4 <vPortExitCritical>

	return xReturn;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e58:	f001 fc14 	bl	8007684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d102      	bne.n	8005e6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e001      	b.n	8005e72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 fc37 	bl	80076e4 <vPortExitCritical>

	return xReturn;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e014      	b.n	8005eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e90:	4a0f      	ldr	r2, [pc, #60]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e9c:	490c      	ldr	r1, [pc, #48]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eb2:	e006      	b.n	8005ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b07      	cmp	r3, #7
 8005ebe:	d9e7      	bls.n	8005e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	2000500c 	.word	0x2000500c

08005ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ee4:	f001 fbce 	bl	8007684 <vPortEnterCritical>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef4:	d103      	bne.n	8005efe <vQueueWaitForMessageRestricted+0x2a>
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f0a:	d103      	bne.n	8005f14 <vQueueWaitForMessageRestricted+0x40>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	f001 fbe6 	bl	80076e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3324      	adds	r3, #36	; 0x24
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fc61 	bl	80067f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f7ff ff26 	bl	8005d80 <prvUnlockQueue>
	}
 8005f34:	bf00      	nop
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	; 0x38
 8005f40:	af04      	add	r7, sp, #16
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	623b      	str	r3, [r7, #32]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	61fb      	str	r3, [r7, #28]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f82:	23bc      	movs	r3, #188	; 0xbc
 8005f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2bbc      	cmp	r3, #188	; 0xbc
 8005f8a:	d00a      	beq.n	8005fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61bb      	str	r3, [r7, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01e      	beq.n	8005fe8 <xTaskCreateStatic+0xac>
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f850 	bl	8006080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe2:	f000 f8f3 	bl	80061cc <prvAddNewTaskToReadyList>
 8005fe6:	e001      	b.n	8005fec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fec:	697b      	ldr	r3, [r7, #20]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b08c      	sub	sp, #48	; 0x30
 8005ffa:	af04      	add	r7, sp, #16
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fc5c 	bl	80078c8 <pvPortMalloc>
 8006010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006018:	20bc      	movs	r0, #188	; 0xbc
 800601a:	f001 fc55 	bl	80078c8 <pvPortMalloc>
 800601e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
 800602c:	e005      	b.n	800603a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800602e:	6978      	ldr	r0, [r7, #20]
 8006030:	f001 fd16 	bl	8007a60 <vPortFree>
 8006034:	e001      	b.n	800603a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d017      	beq.n	8006070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	2300      	movs	r3, #0
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f80e 	bl	8006080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006064:	69f8      	ldr	r0, [r7, #28]
 8006066:	f000 f8b1 	bl	80061cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800606a:	2301      	movs	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e002      	b.n	8006076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006076:	69bb      	ldr	r3, [r7, #24]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	461a      	mov	r2, r3
 8006098:	21a5      	movs	r1, #165	; 0xa5
 800609a:	f001 fe33 	bl	8007d04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060a8:	3b01      	subs	r3, #1
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f023 0307 	bic.w	r3, r3, #7
 80060b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	617b      	str	r3, [r7, #20]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01f      	beq.n	800611e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e012      	b.n	800610a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	7819      	ldrb	r1, [r3, #0]
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	3334      	adds	r3, #52	; 0x34
 80060f4:	460a      	mov	r2, r1
 80060f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d9e9      	bls.n	80060e4 <prvInitialiseNewTask+0x64>
 8006110:	e000      	b.n	8006114 <prvInitialiseNewTask+0x94>
			{
				break;
 8006112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611c:	e003      	b.n	8006126 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	2b37      	cmp	r3, #55	; 0x37
 800612a:	d901      	bls.n	8006130 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800612c:	2337      	movs	r3, #55	; 0x37
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f978 	bl	800543c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	3318      	adds	r3, #24
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f973 	bl	800543c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2200      	movs	r2, #0
 8006178:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	3354      	adds	r3, #84	; 0x54
 8006180:	2260      	movs	r2, #96	; 0x60
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fdbd 	bl	8007d04 <memset>
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	4a0c      	ldr	r2, [pc, #48]	; (80061c0 <prvInitialiseNewTask+0x140>)
 800618e:	659a      	str	r2, [r3, #88]	; 0x58
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <prvInitialiseNewTask+0x144>)
 8006194:	65da      	str	r2, [r3, #92]	; 0x5c
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <prvInitialiseNewTask+0x148>)
 800619a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	69b8      	ldr	r0, [r7, #24]
 80061a2:	f001 f941 	bl	8007428 <pxPortInitialiseStack>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b8:	bf00      	nop
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	08007f40 	.word	0x08007f40
 80061c4:	08007f60 	.word	0x08007f60
 80061c8:	08007f20 	.word	0x08007f20

080061cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061d4:	f001 fa56 	bl	8007684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061e2:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061ea:	4a2a      	ldr	r2, [pc, #168]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <prvAddNewTaskToReadyList+0xc4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d110      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061f8:	f000 fc26 	bl	8006a48 <prvInitialiseTaskLists>
 80061fc:	e00d      	b.n	800621a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061fe:	4b26      	ldr	r3, [pc, #152]	; (8006298 <prvAddNewTaskToReadyList+0xcc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006206:	4b23      	ldr	r3, [pc, #140]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	d802      	bhi.n	800621a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006214:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800621a:	4b20      	ldr	r3, [pc, #128]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3301      	adds	r3, #1
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 8006222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <prvAddNewTaskToReadyList+0xd0>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <prvAddNewTaskToReadyList+0xd4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d903      	bls.n	8006240 <prvAddNewTaskToReadyList+0x74>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <prvAddNewTaskToReadyList+0xd4>)
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <prvAddNewTaskToReadyList+0xd8>)
 800624e:	441a      	add	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7ff f8fd 	bl	8005456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800625c:	f001 fa42 	bl	80076e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <prvAddNewTaskToReadyList+0xcc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <prvAddNewTaskToReadyList+0xc8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	429a      	cmp	r2, r3
 8006274:	d207      	bcs.n	8006286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvAddNewTaskToReadyList+0xdc>)
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	2000123c 	.word	0x2000123c
 8006294:	20000d68 	.word	0x20000d68
 8006298:	20001248 	.word	0x20001248
 800629c:	20001258 	.word	0x20001258
 80062a0:	20001244 	.word	0x20001244
 80062a4:	20000d6c 	.word	0x20000d6c
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d017      	beq.n	80062ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <vTaskDelay+0x60>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <vTaskDelay+0x30>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062dc:	f000 f88a 	bl	80063f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fcfe 	bl	8006ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062e8:	f000 f892 	bl	8006410 <xTaskResumeAll>
 80062ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d107      	bne.n	8006304 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <vTaskDelay+0x64>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20001264 	.word	0x20001264
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006322:	463a      	mov	r2, r7
 8006324:	1d39      	adds	r1, r7, #4
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f832 	bl	8005394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	460a      	mov	r2, r1
 8006342:	4924      	ldr	r1, [pc, #144]	; (80063d4 <vTaskStartScheduler+0xc0>)
 8006344:	4824      	ldr	r0, [pc, #144]	; (80063d8 <vTaskStartScheduler+0xc4>)
 8006346:	f7ff fdf9 	bl	8005f3c <xTaskCreateStatic>
 800634a:	4603      	mov	r3, r0
 800634c:	4a23      	ldr	r2, [pc, #140]	; (80063dc <vTaskStartScheduler+0xc8>)
 800634e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006350:	4b22      	ldr	r3, [pc, #136]	; (80063dc <vTaskStartScheduler+0xc8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e001      	b.n	8006362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d102      	bne.n	800636e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006368:	f000 fd10 	bl	8006d8c <xTimerCreateTimerTask>
 800636c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d11b      	bne.n	80063ac <vTaskStartScheduler+0x98>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	613b      	str	r3, [r7, #16]
}
 8006386:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <vTaskStartScheduler+0xcc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3354      	adds	r3, #84	; 0x54
 800638e:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <vTaskStartScheduler+0xd0>)
 8006390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <vTaskStartScheduler+0xd4>)
 8006394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <vTaskStartScheduler+0xd8>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <vTaskStartScheduler+0xdc>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063a6:	f001 f8cb 	bl	8007540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063aa:	e00e      	b.n	80063ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b2:	d10a      	bne.n	80063ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	60fb      	str	r3, [r7, #12]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <vTaskStartScheduler+0xb4>
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	08007ec4 	.word	0x08007ec4
 80063d8:	08006a19 	.word	0x08006a19
 80063dc:	20001260 	.word	0x20001260
 80063e0:	20000d68 	.word	0x20000d68
 80063e4:	20000010 	.word	0x20000010
 80063e8:	2000125c 	.word	0x2000125c
 80063ec:	20001248 	.word	0x20001248
 80063f0:	20001240 	.word	0x20001240

080063f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <vTaskSuspendAll+0x18>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a03      	ldr	r2, [pc, #12]	; (800640c <vTaskSuspendAll+0x18>)
 8006400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20001264 	.word	0x20001264

08006410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800641e:	4b42      	ldr	r3, [pc, #264]	; (8006528 <xTaskResumeAll+0x118>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <xTaskResumeAll+0x2c>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	603b      	str	r3, [r7, #0]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800643c:	f001 f922 	bl	8007684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <xTaskResumeAll+0x118>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3b01      	subs	r3, #1
 8006446:	4a38      	ldr	r2, [pc, #224]	; (8006528 <xTaskResumeAll+0x118>)
 8006448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644a:	4b37      	ldr	r3, [pc, #220]	; (8006528 <xTaskResumeAll+0x118>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d162      	bne.n	8006518 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006452:	4b36      	ldr	r3, [pc, #216]	; (800652c <xTaskResumeAll+0x11c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d05e      	beq.n	8006518 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800645a:	e02f      	b.n	80064bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800645c:	4b34      	ldr	r3, [pc, #208]	; (8006530 <xTaskResumeAll+0x120>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3318      	adds	r3, #24
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff f851 	bl	8005510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3304      	adds	r3, #4
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff f84c 	bl	8005510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4b2d      	ldr	r3, [pc, #180]	; (8006534 <xTaskResumeAll+0x124>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <xTaskResumeAll+0x7c>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <xTaskResumeAll+0x124>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a27      	ldr	r2, [pc, #156]	; (8006538 <xTaskResumeAll+0x128>)
 800649a:	441a      	add	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe ffd7 	bl	8005456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	4b23      	ldr	r3, [pc, #140]	; (800653c <xTaskResumeAll+0x12c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064b6:	4b22      	ldr	r3, [pc, #136]	; (8006540 <xTaskResumeAll+0x130>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <xTaskResumeAll+0x120>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1cb      	bne.n	800645c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064ca:	f000 fb5f 	bl	8006b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <xTaskResumeAll+0x134>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d010      	beq.n	80064fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064da:	f000 f847 	bl	800656c <xTaskIncrementTick>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <xTaskResumeAll+0x130>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f1      	bne.n	80064da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064f6:	4b13      	ldr	r3, [pc, #76]	; (8006544 <xTaskResumeAll+0x134>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <xTaskResumeAll+0x130>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <xTaskResumeAll+0x138>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006518:	f001 f8e4 	bl	80076e4 <vPortExitCritical>

	return xAlreadyYielded;
 800651c:	68bb      	ldr	r3, [r7, #8]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20001264 	.word	0x20001264
 800652c:	2000123c 	.word	0x2000123c
 8006530:	200011fc 	.word	0x200011fc
 8006534:	20001244 	.word	0x20001244
 8006538:	20000d6c 	.word	0x20000d6c
 800653c:	20000d68 	.word	0x20000d68
 8006540:	20001250 	.word	0x20001250
 8006544:	2000124c 	.word	0x2000124c
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <xTaskGetTickCount+0x1c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006558:	687b      	ldr	r3, [r7, #4]
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20001240 	.word	0x20001240

0800656c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006576:	4b4f      	ldr	r3, [pc, #316]	; (80066b4 <xTaskIncrementTick+0x148>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 808f 	bne.w	800669e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006580:	4b4d      	ldr	r3, [pc, #308]	; (80066b8 <xTaskIncrementTick+0x14c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006588:	4a4b      	ldr	r2, [pc, #300]	; (80066b8 <xTaskIncrementTick+0x14c>)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d120      	bne.n	80065d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006594:	4b49      	ldr	r3, [pc, #292]	; (80066bc <xTaskIncrementTick+0x150>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	603b      	str	r3, [r7, #0]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xTaskIncrementTick+0x46>
 80065b4:	4b41      	ldr	r3, [pc, #260]	; (80066bc <xTaskIncrementTick+0x150>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <xTaskIncrementTick+0x154>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a3f      	ldr	r2, [pc, #252]	; (80066bc <xTaskIncrementTick+0x150>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	4a3f      	ldr	r2, [pc, #252]	; (80066c0 <xTaskIncrementTick+0x154>)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <xTaskIncrementTick+0x158>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <xTaskIncrementTick+0x158>)
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	f000 fadb 	bl	8006b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065d6:	4b3c      	ldr	r3, [pc, #240]	; (80066c8 <xTaskIncrementTick+0x15c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d349      	bcc.n	8006674 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e0:	4b36      	ldr	r3, [pc, #216]	; (80066bc <xTaskIncrementTick+0x150>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <xTaskIncrementTick+0x15c>)
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065f0:	601a      	str	r2, [r3, #0]
					break;
 80065f2:	e03f      	b.n	8006674 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f4:	4b31      	ldr	r3, [pc, #196]	; (80066bc <xTaskIncrementTick+0x150>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	429a      	cmp	r2, r3
 800660a:	d203      	bcs.n	8006614 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800660c:	4a2e      	ldr	r2, [pc, #184]	; (80066c8 <xTaskIncrementTick+0x15c>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006612:	e02f      	b.n	8006674 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe ff79 	bl	8005510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3318      	adds	r3, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe ff70 	bl	8005510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <xTaskIncrementTick+0x160>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d903      	bls.n	8006644 <xTaskIncrementTick+0xd8>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a22      	ldr	r2, [pc, #136]	; (80066cc <xTaskIncrementTick+0x160>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <xTaskIncrementTick+0x164>)
 8006652:	441a      	add	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7fe fefb 	bl	8005456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <xTaskIncrementTick+0x168>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	429a      	cmp	r2, r3
 800666c:	d3b8      	bcc.n	80065e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006672:	e7b5      	b.n	80065e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006674:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <xTaskIncrementTick+0x168>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	4915      	ldr	r1, [pc, #84]	; (80066d0 <xTaskIncrementTick+0x164>)
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d901      	bls.n	8006690 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <xTaskIncrementTick+0x16c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e004      	b.n	80066a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <xTaskIncrementTick+0x170>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <xTaskIncrementTick+0x170>)
 80066a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001264 	.word	0x20001264
 80066b8:	20001240 	.word	0x20001240
 80066bc:	200011f4 	.word	0x200011f4
 80066c0:	200011f8 	.word	0x200011f8
 80066c4:	20001254 	.word	0x20001254
 80066c8:	2000125c 	.word	0x2000125c
 80066cc:	20001244 	.word	0x20001244
 80066d0:	20000d6c 	.word	0x20000d6c
 80066d4:	20000d68 	.word	0x20000d68
 80066d8:	20001250 	.word	0x20001250
 80066dc:	2000124c 	.word	0x2000124c

080066e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <vTaskSwitchContext+0xb0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ee:	4b29      	ldr	r3, [pc, #164]	; (8006794 <vTaskSwitchContext+0xb4>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066f4:	e046      	b.n	8006784 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066f6:	4b27      	ldr	r3, [pc, #156]	; (8006794 <vTaskSwitchContext+0xb4>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066fc:	4b26      	ldr	r3, [pc, #152]	; (8006798 <vTaskSwitchContext+0xb8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e010      	b.n	8006726 <vTaskSwitchContext+0x46>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <vTaskSwitchContext+0x40>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	607b      	str	r3, [r7, #4]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <vTaskSwitchContext+0x3e>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3b01      	subs	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	491d      	ldr	r1, [pc, #116]	; (800679c <vTaskSwitchContext+0xbc>)
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0e4      	beq.n	8006704 <vTaskSwitchContext+0x24>
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a15      	ldr	r2, [pc, #84]	; (800679c <vTaskSwitchContext+0xbc>)
 8006746:	4413      	add	r3, r2
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	605a      	str	r2, [r3, #4]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	3308      	adds	r3, #8
 800675c:	429a      	cmp	r2, r3
 800675e:	d104      	bne.n	800676a <vTaskSwitchContext+0x8a>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <vTaskSwitchContext+0xc0>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4a08      	ldr	r2, [pc, #32]	; (8006798 <vTaskSwitchContext+0xb8>)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <vTaskSwitchContext+0xc0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3354      	adds	r3, #84	; 0x54
 8006780:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <vTaskSwitchContext+0xc4>)
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20001264 	.word	0x20001264
 8006794:	20001250 	.word	0x20001250
 8006798:	20001244 	.word	0x20001244
 800679c:	20000d6c 	.word	0x20000d6c
 80067a0:	20000d68 	.word	0x20000d68
 80067a4:	20000010 	.word	0x20000010

080067a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <vTaskPlaceOnEventList+0x44>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3318      	adds	r3, #24
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fe fe61 	bl	800549e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067dc:	2101      	movs	r1, #1
 80067de:	6838      	ldr	r0, [r7, #0]
 80067e0:	f000 fa80 	bl	8006ce4 <prvAddCurrentTaskToDelayedList>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000d68 	.word	0x20000d68

080067f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	617b      	str	r3, [r7, #20]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <vTaskPlaceOnEventListRestricted+0x54>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3318      	adds	r3, #24
 800681e:	4619      	mov	r1, r3
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7fe fe18 	bl	8005456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006830:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f000 fa55 	bl	8006ce4 <prvAddCurrentTaskToDelayedList>
	}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000d68 	.word	0x20000d68

08006848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	3318      	adds	r3, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fe49 	bl	8005510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687e:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <xTaskRemoveFromEventList+0xb0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11d      	bne.n	80068c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3304      	adds	r3, #4
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fe40 	bl	8005510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <xTaskRemoveFromEventList+0xb4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d903      	bls.n	80068a4 <xTaskRemoveFromEventList+0x5c>
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a16      	ldr	r2, [pc, #88]	; (80068fc <xTaskRemoveFromEventList+0xb4>)
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <xTaskRemoveFromEventList+0xb8>)
 80068b2:	441a      	add	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7fe fdcb 	bl	8005456 <vListInsertEnd>
 80068c0:	e005      	b.n	80068ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3318      	adds	r3, #24
 80068c6:	4619      	mov	r1, r3
 80068c8:	480e      	ldr	r0, [pc, #56]	; (8006904 <xTaskRemoveFromEventList+0xbc>)
 80068ca:	f7fe fdc4 	bl	8005456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <xTaskRemoveFromEventList+0xc0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	429a      	cmp	r2, r3
 80068da:	d905      	bls.n	80068e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <xTaskRemoveFromEventList+0xc4>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e001      	b.n	80068ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068ec:	697b      	ldr	r3, [r7, #20]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20001264 	.word	0x20001264
 80068fc:	20001244 	.word	0x20001244
 8006900:	20000d6c 	.word	0x20000d6c
 8006904:	200011fc 	.word	0x200011fc
 8006908:	20000d68 	.word	0x20000d68
 800690c:	20001250 	.word	0x20001250

08006910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <vTaskInternalSetTimeOutState+0x24>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <vTaskInternalSetTimeOutState+0x28>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	605a      	str	r2, [r3, #4]
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	20001254 	.word	0x20001254
 8006938:	20001240 	.word	0x20001240

0800693c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	613b      	str	r3, [r7, #16]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800697e:	f000 fe81 	bl	8007684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006982:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <xTaskCheckForTimeOut+0xbc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800699a:	d102      	bne.n	80069a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e023      	b.n	80069ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <xTaskCheckForTimeOut+0xc0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d007      	beq.n	80069be <xTaskCheckForTimeOut+0x82>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d302      	bcc.n	80069be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	e015      	b.n	80069ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d20b      	bcs.n	80069e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff9b 	bl	8006910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	e004      	b.n	80069ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069ea:	f000 fe7b 	bl	80076e4 <vPortExitCritical>

	return xReturn;
 80069ee:	69fb      	ldr	r3, [r7, #28]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001240 	.word	0x20001240
 80069fc:	20001254 	.word	0x20001254

08006a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <vTaskMissedYield+0x14>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20001250 	.word	0x20001250

08006a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a20:	f000 f852 	bl	8006ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <prvIdleTask+0x28>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d9f9      	bls.n	8006a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <prvIdleTask+0x2c>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a3c:	e7f0      	b.n	8006a20 <prvIdleTask+0x8>
 8006a3e:	bf00      	nop
 8006a40:	20000d6c 	.word	0x20000d6c
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	e00c      	b.n	8006a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <prvInitialiseTaskLists+0x60>)
 8006a60:	4413      	add	r3, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fcca 	bl	80053fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b37      	cmp	r3, #55	; 0x37
 8006a72:	d9ef      	bls.n	8006a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a74:	480d      	ldr	r0, [pc, #52]	; (8006aac <prvInitialiseTaskLists+0x64>)
 8006a76:	f7fe fcc1 	bl	80053fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a7a:	480d      	ldr	r0, [pc, #52]	; (8006ab0 <prvInitialiseTaskLists+0x68>)
 8006a7c:	f7fe fcbe 	bl	80053fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a80:	480c      	ldr	r0, [pc, #48]	; (8006ab4 <prvInitialiseTaskLists+0x6c>)
 8006a82:	f7fe fcbb 	bl	80053fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a86:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <prvInitialiseTaskLists+0x70>)
 8006a88:	f7fe fcb8 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a8c:	480b      	ldr	r0, [pc, #44]	; (8006abc <prvInitialiseTaskLists+0x74>)
 8006a8e:	f7fe fcb5 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <prvInitialiseTaskLists+0x78>)
 8006a94:	4a05      	ldr	r2, [pc, #20]	; (8006aac <prvInitialiseTaskLists+0x64>)
 8006a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <prvInitialiseTaskLists+0x7c>)
 8006a9a:	4a05      	ldr	r2, [pc, #20]	; (8006ab0 <prvInitialiseTaskLists+0x68>)
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000d6c 	.word	0x20000d6c
 8006aac:	200011cc 	.word	0x200011cc
 8006ab0:	200011e0 	.word	0x200011e0
 8006ab4:	200011fc 	.word	0x200011fc
 8006ab8:	20001210 	.word	0x20001210
 8006abc:	20001228 	.word	0x20001228
 8006ac0:	200011f4 	.word	0x200011f4
 8006ac4:	200011f8 	.word	0x200011f8

08006ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ace:	e019      	b.n	8006b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ad0:	f000 fdd8 	bl	8007684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad4:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <prvCheckTasksWaitingTermination+0x50>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fd15 	bl	8005510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <prvCheckTasksWaitingTermination+0x54>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	4a0b      	ldr	r2, [pc, #44]	; (8006b1c <prvCheckTasksWaitingTermination+0x54>)
 8006aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <prvCheckTasksWaitingTermination+0x58>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <prvCheckTasksWaitingTermination+0x58>)
 8006af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006afa:	f000 fdf3 	bl	80076e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f810 	bl	8006b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <prvCheckTasksWaitingTermination+0x58>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e1      	bne.n	8006ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001210 	.word	0x20001210
 8006b1c:	2000123c 	.word	0x2000123c
 8006b20:	20001224 	.word	0x20001224

08006b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3354      	adds	r3, #84	; 0x54
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f8fd 	bl	8007d30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d108      	bne.n	8006b52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 ff8b 	bl	8007a60 <vPortFree>
				vPortFree( pxTCB );
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 ff88 	bl	8007a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b50:	e018      	b.n	8006b84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d103      	bne.n	8006b64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 ff7f 	bl	8007a60 <vPortFree>
	}
 8006b62:	e00f      	b.n	8006b84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d00a      	beq.n	8006b84 <prvDeleteTCB+0x60>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <prvDeleteTCB+0x5e>
	}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <prvResetNextTaskUnblockTime+0x38>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ba4:	e008      	b.n	8006bb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <prvResetNextTaskUnblockTime+0x38>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bb6:	6013      	str	r3, [r2, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	200011f4 	.word	0x200011f4
 8006bc8:	2000125c 	.word	0x2000125c

08006bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <xTaskGetSchedulerState+0x34>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	e008      	b.n	8006bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <xTaskGetSchedulerState+0x38>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006be8:	2302      	movs	r3, #2
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	e001      	b.n	8006bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bf2:	687b      	ldr	r3, [r7, #4]
	}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20001248 	.word	0x20001248
 8006c04:	20001264 	.word	0x20001264

08006c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d056      	beq.n	8006ccc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	; (8006cd8 <xTaskPriorityDisinherit+0xd0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d00a      	beq.n	8006c3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d02c      	beq.n	8006ccc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d128      	bne.n	8006ccc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fc46 	bl	8005510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <xTaskPriorityDisinherit+0xd4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d903      	bls.n	8006cac <xTaskPriorityDisinherit+0xa4>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	; (8006cdc <xTaskPriorityDisinherit+0xd4>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <xTaskPriorityDisinherit+0xd8>)
 8006cba:	441a      	add	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fe fbc7 	bl	8005456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
	}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000d68 	.word	0x20000d68
 8006cdc:	20001244 	.word	0x20001244
 8006ce0:	20000d6c 	.word	0x20000d6c

08006ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cee:	4b21      	ldr	r3, [pc, #132]	; (8006d74 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf4:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fc08 	bl	8005510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d06:	d10a      	bne.n	8006d1e <prvAddCurrentTaskToDelayedList+0x3a>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d0e:	4b1a      	ldr	r3, [pc, #104]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4819      	ldr	r0, [pc, #100]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x98>)
 8006d18:	f7fe fb9d 	bl	8005456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d1c:	e026      	b.n	8006d6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d209      	bcs.n	8006d4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	4610      	mov	r0, r2
 8006d44:	f7fe fbab 	bl	800549e <vListInsert>
}
 8006d48:	e010      	b.n	8006d6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d4a:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fe fba1 	bl	800549e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d202      	bcs.n	8006d6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d66:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6013      	str	r3, [r2, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20001240 	.word	0x20001240
 8006d78:	20000d68 	.word	0x20000d68
 8006d7c:	20001228 	.word	0x20001228
 8006d80:	200011f8 	.word	0x200011f8
 8006d84:	200011f4 	.word	0x200011f4
 8006d88:	2000125c 	.word	0x2000125c

08006d8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d96:	f000 fb07 	bl	80073a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d9a:	4b1c      	ldr	r3, [pc, #112]	; (8006e0c <xTimerCreateTimerTask+0x80>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d021      	beq.n	8006de6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006daa:	1d3a      	adds	r2, r7, #4
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fb07 	bl	80053c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	9202      	str	r2, [sp, #8]
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	460a      	mov	r2, r1
 8006dcc:	4910      	ldr	r1, [pc, #64]	; (8006e10 <xTimerCreateTimerTask+0x84>)
 8006dce:	4811      	ldr	r0, [pc, #68]	; (8006e14 <xTimerCreateTimerTask+0x88>)
 8006dd0:	f7ff f8b4 	bl	8005f3c <xTaskCreateStatic>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <xTimerCreateTimerTask+0x8c>)
 8006dd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <xTimerCreateTimerTask+0x8c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	613b      	str	r3, [r7, #16]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e02:	697b      	ldr	r3, [r7, #20]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20001298 	.word	0x20001298
 8006e10:	08007ecc 	.word	0x08007ecc
 8006e14:	08006f51 	.word	0x08006f51
 8006e18:	2000129c 	.word	0x2000129c

08006e1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	623b      	str	r3, [r7, #32]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <xTimerGenericCommand+0x98>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d02a      	beq.n	8006ea8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	dc18      	bgt.n	8006e96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e64:	f7ff feb2 	bl	8006bcc <xTaskGetSchedulerState>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d109      	bne.n	8006e82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <xTimerGenericCommand+0x98>)
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f107 0110 	add.w	r1, r7, #16
 8006e76:	2300      	movs	r3, #0
 8006e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7a:	f7fe fc77 	bl	800576c <xQueueGenericSend>
 8006e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e80:	e012      	b.n	8006ea8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <xTimerGenericCommand+0x98>)
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	f107 0110 	add.w	r1, r7, #16
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f7fe fc6d 	bl	800576c <xQueueGenericSend>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24
 8006e94:	e008      	b.n	8006ea8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <xTimerGenericCommand+0x98>)
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f107 0110 	add.w	r1, r7, #16
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	f7fe fd61 	bl	8005968 <xQueueGenericSendFromISR>
 8006ea6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3728      	adds	r7, #40	; 0x28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20001298 	.word	0x20001298

08006eb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec2:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <prvProcessExpiredTimer+0x94>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fb1d 	bl	8005510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d022      	beq.n	8006f2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	18d1      	adds	r1, r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f000 f8d1 	bl	8007098 <prvInsertTimerInActiveList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01f      	beq.n	8006f3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006efc:	2300      	movs	r3, #0
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	2100      	movs	r1, #0
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	f7ff ff88 	bl	8006e1c <xTimerGenericCommand>
 8006f0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d113      	bne.n	8006f3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	60fb      	str	r3, [r7, #12]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	6978      	ldr	r0, [r7, #20]
 8006f42:	4798      	blx	r3
}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20001290 	.word	0x20001290

08006f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 f857 	bl	8007010 <prvGetNextExpireTime>
 8006f62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4619      	mov	r1, r3
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f803 	bl	8006f74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f6e:	f000 f8d5 	bl	800711c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f72:	e7f1      	b.n	8006f58 <prvTimerTask+0x8>

08006f74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f7e:	f7ff fa39 	bl	80063f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f866 	bl	8007058 <prvSampleTimeNow>
 8006f8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d130      	bne.n	8006ff6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <prvProcessTimerOrBlockTask+0x3c>
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d806      	bhi.n	8006fb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fa2:	f7ff fa35 	bl	8006410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff85 	bl	8006eb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fae:	e024      	b.n	8006ffa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d008      	beq.n	8006fc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <prvProcessTimerOrBlockTask+0x90>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <prvProcessTimerOrBlockTask+0x50>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x52>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <prvProcessTimerOrBlockTask+0x94>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f7fe ff7d 	bl	8005ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fda:	f7ff fa19 	bl	8006410 <xTaskResumeAll>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <prvProcessTimerOrBlockTask+0x98>)
 8006fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	f3bf 8f6f 	isb	sy
}
 8006ff4:	e001      	b.n	8006ffa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ff6:	f7ff fa0b 	bl	8006410 <xTaskResumeAll>
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20001294 	.word	0x20001294
 8007008:	20001298 	.word	0x20001298
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <prvGetNextExpireTime+0x44>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <prvGetNextExpireTime+0x16>
 8007022:	2201      	movs	r2, #1
 8007024:	e000      	b.n	8007028 <prvGetNextExpireTime+0x18>
 8007026:	2200      	movs	r2, #0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007034:	4b07      	ldr	r3, [pc, #28]	; (8007054 <prvGetNextExpireTime+0x44>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e001      	b.n	8007044 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007044:	68fb      	ldr	r3, [r7, #12]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20001290 	.word	0x20001290

08007058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007060:	f7ff fa74 	bl	800654c <xTaskGetTickCount>
 8007064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <prvSampleTimeNow+0x3c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	429a      	cmp	r2, r3
 800706e:	d205      	bcs.n	800707c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007070:	f000 f936 	bl	80072e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e002      	b.n	8007082 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007082:	4a04      	ldr	r2, [pc, #16]	; (8007094 <prvSampleTimeNow+0x3c>)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200012a0 	.word	0x200012a0

08007098 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d812      	bhi.n	80070e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e01b      	b.n	800710a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <prvInsertTimerInActiveList+0x7c>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7fe f9de 	bl	800549e <vListInsert>
 80070e2:	e012      	b.n	800710a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d206      	bcs.n	80070fa <prvInsertTimerInActiveList+0x62>
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d302      	bcc.n	80070fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e007      	b.n	800710a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <prvInsertTimerInActiveList+0x80>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f7fe f9ca 	bl	800549e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800710a:	697b      	ldr	r3, [r7, #20]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20001294 	.word	0x20001294
 8007118:	20001290 	.word	0x20001290

0800711c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007122:	e0ca      	b.n	80072ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	da18      	bge.n	800715c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	3304      	adds	r3, #4
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61fb      	str	r3, [r7, #28]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007152:	6850      	ldr	r0, [r2, #4]
 8007154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007156:	6892      	ldr	r2, [r2, #8]
 8007158:	4611      	mov	r1, r2
 800715a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f2c0 80aa 	blt.w	80072b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	3304      	adds	r3, #4
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe f9cb 	bl	8005510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800717a:	463b      	mov	r3, r7
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff ff6b 	bl	8007058 <prvSampleTimeNow>
 8007182:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b09      	cmp	r3, #9
 8007188:	f200 8097 	bhi.w	80072ba <prvProcessReceivedCommands+0x19e>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <prvProcessReceivedCommands+0x78>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071bd 	.word	0x080071bd
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071bd 	.word	0x080071bd
 80071a0:	08007231 	.word	0x08007231
 80071a4:	08007245 	.word	0x08007245
 80071a8:	0800728f 	.word	0x0800728f
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071bd 	.word	0x080071bd
 80071b4:	08007231 	.word	0x08007231
 80071b8:	08007245 	.word	0x08007245
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	18d1      	adds	r1, r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071dc:	f7ff ff5c 	bl	8007098 <prvInsertTimerInActiveList>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d069      	beq.n	80072ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05e      	beq.n	80072ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	441a      	add	r2, r3
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2300      	movs	r3, #0
 800720a:	2100      	movs	r1, #0
 800720c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720e:	f7ff fe05 	bl	8006e1c <xTimerGenericCommand>
 8007212:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d14f      	bne.n	80072ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	61bb      	str	r3, [r7, #24]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007242:	e03a      	b.n	80072ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	617b      	str	r3, [r7, #20]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	18d1      	adds	r1, r2, r3
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007288:	f7ff ff06 	bl	8007098 <prvInsertTimerInActiveList>
					break;
 800728c:	e015      	b.n	80072ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729e:	f000 fbdf 	bl	8007a60 <vPortFree>
 80072a2:	e00a      	b.n	80072ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f023 0301 	bic.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072b6:	e000      	b.n	80072ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80072b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <prvProcessReceivedCommands+0x1c0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	1d39      	adds	r1, r7, #4
 80072c0:	2200      	movs	r2, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fbec 	bl	8005aa0 <xQueueReceive>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f47f af2a 	bne.w	8007124 <prvProcessReceivedCommands+0x8>
	}
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	3730      	adds	r7, #48	; 0x30
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20001298 	.word	0x20001298

080072e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072e6:	e048      	b.n	800737a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072e8:	4b2d      	ldr	r3, [pc, #180]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f2:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3304      	adds	r3, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe f905 	bl	8005510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02e      	beq.n	800737a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4413      	add	r3, r2
 8007324:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d90e      	bls.n	800734c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800733a:	4b19      	ldr	r3, [pc, #100]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe f8aa 	bl	800549e <vListInsert>
 800734a:	e016      	b.n	800737a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	2100      	movs	r1, #0
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff fd60 	bl	8006e1c <xTimerGenericCommand>
 800735c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	603b      	str	r3, [r7, #0]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1b1      	bne.n	80072e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <prvSwitchTimerLists+0xc4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a04      	ldr	r2, [pc, #16]	; (80073a0 <prvSwitchTimerLists+0xc0>)
 8007390:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007392:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <prvSwitchTimerLists+0xc4>)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20001290 	.word	0x20001290
 80073a4:	20001294 	.word	0x20001294

080073a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073ae:	f000 f969 	bl	8007684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <prvCheckForValidListAndQueue+0x60>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d120      	bne.n	80073fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073ba:	4814      	ldr	r0, [pc, #80]	; (800740c <prvCheckForValidListAndQueue+0x64>)
 80073bc:	f7fe f81e 	bl	80053fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073c0:	4813      	ldr	r0, [pc, #76]	; (8007410 <prvCheckForValidListAndQueue+0x68>)
 80073c2:	f7fe f81b 	bl	80053fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <prvCheckForValidListAndQueue+0x6c>)
 80073c8:	4a10      	ldr	r2, [pc, #64]	; (800740c <prvCheckForValidListAndQueue+0x64>)
 80073ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <prvCheckForValidListAndQueue+0x70>)
 80073ce:	4a10      	ldr	r2, [pc, #64]	; (8007410 <prvCheckForValidListAndQueue+0x68>)
 80073d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073d2:	2300      	movs	r3, #0
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <prvCheckForValidListAndQueue+0x74>)
 80073d8:	4a11      	ldr	r2, [pc, #68]	; (8007420 <prvCheckForValidListAndQueue+0x78>)
 80073da:	2110      	movs	r1, #16
 80073dc:	200a      	movs	r0, #10
 80073de:	f7fe f929 	bl	8005634 <xQueueGenericCreateStatic>
 80073e2:	4603      	mov	r3, r0
 80073e4:	4a08      	ldr	r2, [pc, #32]	; (8007408 <prvCheckForValidListAndQueue+0x60>)
 80073e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <prvCheckForValidListAndQueue+0x60>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <prvCheckForValidListAndQueue+0x60>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	490b      	ldr	r1, [pc, #44]	; (8007424 <prvCheckForValidListAndQueue+0x7c>)
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fd42 	bl	8005e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073fc:	f000 f972 	bl	80076e4 <vPortExitCritical>
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20001298 	.word	0x20001298
 800740c:	20001268 	.word	0x20001268
 8007410:	2000127c 	.word	0x2000127c
 8007414:	20001290 	.word	0x20001290
 8007418:	20001294 	.word	0x20001294
 800741c:	20001344 	.word	0x20001344
 8007420:	200012a4 	.word	0x200012a4
 8007424:	08007ed4 	.word	0x08007ed4

08007428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b04      	subs	r3, #4
 8007438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3b04      	subs	r3, #4
 8007446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f023 0201 	bic.w	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3b04      	subs	r3, #4
 8007456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007458:	4a0c      	ldr	r2, [pc, #48]	; (800748c <pxPortInitialiseStack+0x64>)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3b14      	subs	r3, #20
 8007462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3b04      	subs	r3, #4
 800746e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f06f 0202 	mvn.w	r2, #2
 8007476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3b20      	subs	r3, #32
 800747c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800747e:	68fb      	ldr	r3, [r7, #12]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	08007491 	.word	0x08007491

08007490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <prvTaskExitError+0x54>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a2:	d00a      	beq.n	80074ba <prvTaskExitError+0x2a>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	60fb      	str	r3, [r7, #12]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <prvTaskExitError+0x28>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074ce:	bf00      	nop
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0fc      	beq.n	80074d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	2000000c 	.word	0x2000000c
	...

080074f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074f0:	4b07      	ldr	r3, [pc, #28]	; (8007510 <pxCurrentTCBConst2>)
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f380 8809 	msr	PSP, r0
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8811 	msr	BASEPRI, r0
 800750a:	4770      	bx	lr
 800750c:	f3af 8000 	nop.w

08007510 <pxCurrentTCBConst2>:
 8007510:	20000d68 	.word	0x20000d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop

08007518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007518:	4808      	ldr	r0, [pc, #32]	; (800753c <prvPortStartFirstTask+0x24>)
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	6800      	ldr	r0, [r0, #0]
 800751e:	f380 8808 	msr	MSP, r0
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8814 	msr	CONTROL, r0
 800752a:	b662      	cpsie	i
 800752c:	b661      	cpsie	f
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	df00      	svc	0
 8007538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800753a:	bf00      	nop
 800753c:	e000ed08 	.word	0xe000ed08

08007540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007546:	4b46      	ldr	r3, [pc, #280]	; (8007660 <xPortStartScheduler+0x120>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a46      	ldr	r2, [pc, #280]	; (8007664 <xPortStartScheduler+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10a      	bne.n	8007566 <xPortStartScheduler+0x26>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	613b      	str	r3, [r7, #16]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007566:	4b3e      	ldr	r3, [pc, #248]	; (8007660 <xPortStartScheduler+0x120>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3f      	ldr	r2, [pc, #252]	; (8007668 <xPortStartScheduler+0x128>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d10a      	bne.n	8007586 <xPortStartScheduler+0x46>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007586:	4b39      	ldr	r3, [pc, #228]	; (800766c <xPortStartScheduler+0x12c>)
 8007588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4b31      	ldr	r3, [pc, #196]	; (8007670 <xPortStartScheduler+0x130>)
 80075ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ae:	4b31      	ldr	r3, [pc, #196]	; (8007674 <xPortStartScheduler+0x134>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075b4:	e009      	b.n	80075ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075b6:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <xPortStartScheduler+0x134>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a2d      	ldr	r2, [pc, #180]	; (8007674 <xPortStartScheduler+0x134>)
 80075be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b80      	cmp	r3, #128	; 0x80
 80075d4:	d0ef      	beq.n	80075b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075d6:	4b27      	ldr	r3, [pc, #156]	; (8007674 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f1c3 0307 	rsb	r3, r3, #7
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d00a      	beq.n	80075f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60bb      	str	r3, [r7, #8]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075f8:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <xPortStartScheduler+0x134>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <xPortStartScheduler+0x134>)
 8007600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <xPortStartScheduler+0x134>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800760a:	4a1a      	ldr	r2, [pc, #104]	; (8007674 <xPortStartScheduler+0x134>)
 800760c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007616:	4b18      	ldr	r3, [pc, #96]	; (8007678 <xPortStartScheduler+0x138>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <xPortStartScheduler+0x138>)
 800761c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <xPortStartScheduler+0x138>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a14      	ldr	r2, [pc, #80]	; (8007678 <xPortStartScheduler+0x138>)
 8007628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800762c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800762e:	f000 f8dd 	bl	80077ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007632:	4b12      	ldr	r3, [pc, #72]	; (800767c <xPortStartScheduler+0x13c>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007638:	f000 f8fc 	bl	8007834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800763c:	4b10      	ldr	r3, [pc, #64]	; (8007680 <xPortStartScheduler+0x140>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0f      	ldr	r2, [pc, #60]	; (8007680 <xPortStartScheduler+0x140>)
 8007642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007648:	f7ff ff66 	bl	8007518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800764c:	f7ff f848 	bl	80066e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007650:	f7ff ff1e 	bl	8007490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	e000ed00 	.word	0xe000ed00
 8007664:	410fc271 	.word	0x410fc271
 8007668:	410fc270 	.word	0x410fc270
 800766c:	e000e400 	.word	0xe000e400
 8007670:	20001394 	.word	0x20001394
 8007674:	20001398 	.word	0x20001398
 8007678:	e000ed20 	.word	0xe000ed20
 800767c:	2000000c 	.word	0x2000000c
 8007680:	e000ef34 	.word	0xe000ef34

08007684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	607b      	str	r3, [r7, #4]
}
 800769c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <vPortEnterCritical+0x58>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <vPortEnterCritical+0x58>)
 80076a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <vPortEnterCritical+0x58>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10f      	bne.n	80076d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <vPortEnterCritical+0x5c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	603b      	str	r3, [r7, #0]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <vPortEnterCritical+0x4a>
	}
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	2000000c 	.word	0x2000000c
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ea:	4b12      	ldr	r3, [pc, #72]	; (8007734 <vPortExitCritical+0x50>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <vPortExitCritical+0x24>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	607b      	str	r3, [r7, #4]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <vPortExitCritical+0x50>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3b01      	subs	r3, #1
 800770e:	4a09      	ldr	r2, [pc, #36]	; (8007734 <vPortExitCritical+0x50>)
 8007710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007712:	4b08      	ldr	r3, [pc, #32]	; (8007734 <vPortExitCritical+0x50>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <vPortExitCritical+0x42>
 800771a:	2300      	movs	r3, #0
 800771c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f383 8811 	msr	BASEPRI, r3
}
 8007724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000000c 	.word	0x2000000c
	...

08007740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007740:	f3ef 8009 	mrs	r0, PSP
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <pxCurrentTCBConst>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	f01e 0f10 	tst.w	lr, #16
 8007750:	bf08      	it	eq
 8007752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	6010      	str	r0, [r2, #0]
 800775c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007764:	f380 8811 	msr	BASEPRI, r0
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f7fe ffb6 	bl	80066e0 <vTaskSwitchContext>
 8007774:	f04f 0000 	mov.w	r0, #0
 8007778:	f380 8811 	msr	BASEPRI, r0
 800777c:	bc09      	pop	{r0, r3}
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	6808      	ldr	r0, [r1, #0]
 8007782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	f01e 0f10 	tst.w	lr, #16
 800778a:	bf08      	it	eq
 800778c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007790:	f380 8809 	msr	PSP, r0
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst>:
 80077a0:	20000d68 	.word	0x20000d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077c2:	f7fe fed3 	bl	800656c <xTaskIncrementTick>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <xPortSysTickHandler+0x40>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	2300      	movs	r3, #0
 80077d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f383 8811 	msr	BASEPRI, r3
}
 80077de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <vPortSetupTimerInterrupt+0x34>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077f6:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <vPortSetupTimerInterrupt+0x38>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <vPortSetupTimerInterrupt+0x3c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0a      	ldr	r2, [pc, #40]	; (800782c <vPortSetupTimerInterrupt+0x40>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	099b      	lsrs	r3, r3, #6
 8007808:	4a09      	ldr	r2, [pc, #36]	; (8007830 <vPortSetupTimerInterrupt+0x44>)
 800780a:	3b01      	subs	r3, #1
 800780c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800780e:	4b04      	ldr	r3, [pc, #16]	; (8007820 <vPortSetupTimerInterrupt+0x34>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	e000e010 	.word	0xe000e010
 8007824:	e000e018 	.word	0xe000e018
 8007828:	20000000 	.word	0x20000000
 800782c:	10624dd3 	.word	0x10624dd3
 8007830:	e000e014 	.word	0xe000e014

08007834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007844 <vPortEnableVFP+0x10>
 8007838:	6801      	ldr	r1, [r0, #0]
 800783a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800783e:	6001      	str	r1, [r0, #0]
 8007840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007842:	bf00      	nop
 8007844:	e000ed88 	.word	0xe000ed88

08007848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b0f      	cmp	r3, #15
 8007858:	d914      	bls.n	8007884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <vPortValidateInterruptPriority+0x70>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007864:	4b15      	ldr	r3, [pc, #84]	; (80078bc <vPortValidateInterruptPriority+0x74>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	7afa      	ldrb	r2, [r7, #11]
 800786a:	429a      	cmp	r2, r3
 800786c:	d20a      	bcs.n	8007884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007884:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <vPortValidateInterruptPriority+0x78>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800788c:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <vPortValidateInterruptPriority+0x7c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d90a      	bls.n	80078aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	603b      	str	r3, [r7, #0]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <vPortValidateInterruptPriority+0x60>
	}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	e000e3f0 	.word	0xe000e3f0
 80078bc:	20001394 	.word	0x20001394
 80078c0:	e000ed0c 	.word	0xe000ed0c
 80078c4:	20001398 	.word	0x20001398

080078c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078d4:	f7fe fd8e 	bl	80063f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078d8:	4b5b      	ldr	r3, [pc, #364]	; (8007a48 <pvPortMalloc+0x180>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078e0:	f000 f920 	bl	8007b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078e4:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <pvPortMalloc+0x184>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8093 	bne.w	8007a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01d      	beq.n	8007934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078f8:	2208      	movs	r2, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4413      	add	r3, r2
 80078fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b00      	cmp	r3, #0
 8007908:	d014      	beq.n	8007934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f023 0307 	bic.w	r3, r3, #7
 8007910:	3308      	adds	r3, #8
 8007912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <pvPortMalloc+0x6c>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	617b      	str	r3, [r7, #20]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d06e      	beq.n	8007a18 <pvPortMalloc+0x150>
 800793a:	4b45      	ldr	r3, [pc, #276]	; (8007a50 <pvPortMalloc+0x188>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d869      	bhi.n	8007a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007944:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <pvPortMalloc+0x18c>)
 8007946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007948:	4b42      	ldr	r3, [pc, #264]	; (8007a54 <pvPortMalloc+0x18c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794e:	e004      	b.n	800795a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d903      	bls.n	800796c <pvPortMalloc+0xa4>
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f1      	bne.n	8007950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800796c:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <pvPortMalloc+0x180>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007972:	429a      	cmp	r2, r3
 8007974:	d050      	beq.n	8007a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2208      	movs	r2, #8
 800797c:	4413      	add	r3, r2
 800797e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	2308      	movs	r3, #8
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	429a      	cmp	r2, r3
 8007996:	d91f      	bls.n	80079d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4413      	add	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <pvPortMalloc+0xf8>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	613b      	str	r3, [r7, #16]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079d2:	69b8      	ldr	r0, [r7, #24]
 80079d4:	f000 f908 	bl	8007be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079d8:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <pvPortMalloc+0x188>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <pvPortMalloc+0x188>)
 80079e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079e6:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <pvPortMalloc+0x188>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <pvPortMalloc+0x190>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d203      	bcs.n	80079fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079f2:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <pvPortMalloc+0x188>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a18      	ldr	r2, [pc, #96]	; (8007a58 <pvPortMalloc+0x190>)
 80079f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <pvPortMalloc+0x184>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	431a      	orrs	r2, r3
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <pvPortMalloc+0x194>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <pvPortMalloc+0x194>)
 8007a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a18:	f7fe fcfa 	bl	8006410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <pvPortMalloc+0x174>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60fb      	str	r3, [r7, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	e7fe      	b.n	8007a3a <pvPortMalloc+0x172>
	return pvReturn;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3728      	adds	r7, #40	; 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20004fa4 	.word	0x20004fa4
 8007a4c:	20004fb8 	.word	0x20004fb8
 8007a50:	20004fa8 	.word	0x20004fa8
 8007a54:	20004f9c 	.word	0x20004f9c
 8007a58:	20004fac 	.word	0x20004fac
 8007a5c:	20004fb0 	.word	0x20004fb0

08007a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d04d      	beq.n	8007b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a72:	2308      	movs	r3, #8
 8007a74:	425b      	negs	r3, r3
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <vPortFree+0xb8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <vPortFree+0x44>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60fb      	str	r3, [r7, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <vPortFree+0x62>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60bb      	str	r3, [r7, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <vPortFree+0xb8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01e      	beq.n	8007b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11a      	bne.n	8007b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <vPortFree+0xb8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ae8:	f7fe fc84 	bl	80063f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <vPortFree+0xbc>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4413      	add	r3, r2
 8007af6:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <vPortFree+0xbc>)
 8007af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007afa:	6938      	ldr	r0, [r7, #16]
 8007afc:	f000 f874 	bl	8007be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <vPortFree+0xc0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <vPortFree+0xc0>)
 8007b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b0a:	f7fe fc81 	bl	8006410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20004fb8 	.word	0x20004fb8
 8007b1c:	20004fa8 	.word	0x20004fa8
 8007b20:	20004fb4 	.word	0x20004fb4

08007b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b30:	4b27      	ldr	r3, [pc, #156]	; (8007bd0 <prvHeapInit+0xac>)
 8007b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3307      	adds	r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	4a1f      	ldr	r2, [pc, #124]	; (8007bd0 <prvHeapInit+0xac>)
 8007b54:	4413      	add	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <prvHeapInit+0xb0>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b62:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <prvHeapInit+0xb0>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b70:	2208      	movs	r2, #8
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1a9b      	subs	r3, r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4a15      	ldr	r2, [pc, #84]	; (8007bd8 <prvHeapInit+0xb4>)
 8007b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <prvHeapInit+0xb4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <prvHeapInit+0xb4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvHeapInit+0xb4>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <prvHeapInit+0xb8>)
 8007bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <prvHeapInit+0xbc>)
 8007bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bbc:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <prvHeapInit+0xc0>)
 8007bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bc2:	601a      	str	r2, [r3, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	2000139c 	.word	0x2000139c
 8007bd4:	20004f9c 	.word	0x20004f9c
 8007bd8:	20004fa4 	.word	0x20004fa4
 8007bdc:	20004fac 	.word	0x20004fac
 8007be0:	20004fa8 	.word	0x20004fa8
 8007be4:	20004fb8 	.word	0x20004fb8

08007be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bf0:	4b28      	ldr	r3, [pc, #160]	; (8007c94 <prvInsertBlockIntoFreeList+0xac>)
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	e002      	b.n	8007bfc <prvInsertBlockIntoFreeList+0x14>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d8f7      	bhi.n	8007bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	4413      	add	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d108      	bne.n	8007c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	441a      	add	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d118      	bne.n	8007c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <prvInsertBlockIntoFreeList+0xb0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d00d      	beq.n	8007c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	e008      	b.n	8007c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c66:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <prvInsertBlockIntoFreeList+0xb0>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e003      	b.n	8007c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d002      	beq.n	8007c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20004f9c 	.word	0x20004f9c
 8007c98:	20004fa4 	.word	0x20004fa4

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	; (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	; (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	; (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	; (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 f8f6 	bl	8007ea0 <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	08007f88 	.word	0x08007f88
 8007cd8:	08007f88 	.word	0x08007f88
 8007cdc:	08007f88 	.word	0x08007f88
 8007ce0:	08007f8c 	.word	0x08007f8c

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <memcpy>:
 8007ce8:	440a      	add	r2, r1
 8007cea:	4291      	cmp	r1, r2
 8007cec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cf0:	d100      	bne.n	8007cf4 <memcpy+0xc>
 8007cf2:	4770      	bx	lr
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfe:	4291      	cmp	r1, r2
 8007d00:	d1f9      	bne.n	8007cf6 <memcpy+0xe>
 8007d02:	bd10      	pop	{r4, pc}

08007d04 <memset>:
 8007d04:	4402      	add	r2, r0
 8007d06:	4603      	mov	r3, r0
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d100      	bne.n	8007d0e <memset+0xa>
 8007d0c:	4770      	bx	lr
 8007d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d12:	e7f9      	b.n	8007d08 <memset+0x4>

08007d14 <cleanup_glue>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	460c      	mov	r4, r1
 8007d18:	6809      	ldr	r1, [r1, #0]
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b109      	cbz	r1, 8007d22 <cleanup_glue+0xe>
 8007d1e:	f7ff fff9 	bl	8007d14 <cleanup_glue>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2a:	f000 b869 	b.w	8007e00 <_free_r>
	...

08007d30 <_reclaim_reent>:
 8007d30:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <_reclaim_reent+0xb4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4283      	cmp	r3, r0
 8007d36:	b570      	push	{r4, r5, r6, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	d051      	beq.n	8007de0 <_reclaim_reent+0xb0>
 8007d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d3e:	b143      	cbz	r3, 8007d52 <_reclaim_reent+0x22>
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d14a      	bne.n	8007ddc <_reclaim_reent+0xac>
 8007d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d48:	6819      	ldr	r1, [r3, #0]
 8007d4a:	b111      	cbz	r1, 8007d52 <_reclaim_reent+0x22>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 f857 	bl	8007e00 <_free_r>
 8007d52:	6961      	ldr	r1, [r4, #20]
 8007d54:	b111      	cbz	r1, 8007d5c <_reclaim_reent+0x2c>
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 f852 	bl	8007e00 <_free_r>
 8007d5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d5e:	b111      	cbz	r1, 8007d66 <_reclaim_reent+0x36>
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 f84d 	bl	8007e00 <_free_r>
 8007d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d68:	b111      	cbz	r1, 8007d70 <_reclaim_reent+0x40>
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f848 	bl	8007e00 <_free_r>
 8007d70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d72:	b111      	cbz	r1, 8007d7a <_reclaim_reent+0x4a>
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 f843 	bl	8007e00 <_free_r>
 8007d7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d7c:	b111      	cbz	r1, 8007d84 <_reclaim_reent+0x54>
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f83e 	bl	8007e00 <_free_r>
 8007d84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d86:	b111      	cbz	r1, 8007d8e <_reclaim_reent+0x5e>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 f839 	bl	8007e00 <_free_r>
 8007d8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d90:	b111      	cbz	r1, 8007d98 <_reclaim_reent+0x68>
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f834 	bl	8007e00 <_free_r>
 8007d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9a:	b111      	cbz	r1, 8007da2 <_reclaim_reent+0x72>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f82f 	bl	8007e00 <_free_r>
 8007da2:	69a3      	ldr	r3, [r4, #24]
 8007da4:	b1e3      	cbz	r3, 8007de0 <_reclaim_reent+0xb0>
 8007da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007da8:	4620      	mov	r0, r4
 8007daa:	4798      	blx	r3
 8007dac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dae:	b1b9      	cbz	r1, 8007de0 <_reclaim_reent+0xb0>
 8007db0:	4620      	mov	r0, r4
 8007db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007db6:	f7ff bfad 	b.w	8007d14 <cleanup_glue>
 8007dba:	5949      	ldr	r1, [r1, r5]
 8007dbc:	b941      	cbnz	r1, 8007dd0 <_reclaim_reent+0xa0>
 8007dbe:	3504      	adds	r5, #4
 8007dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc2:	2d80      	cmp	r5, #128	; 0x80
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	d1f8      	bne.n	8007dba <_reclaim_reent+0x8a>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f819 	bl	8007e00 <_free_r>
 8007dce:	e7ba      	b.n	8007d46 <_reclaim_reent+0x16>
 8007dd0:	680e      	ldr	r6, [r1, #0]
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f814 	bl	8007e00 <_free_r>
 8007dd8:	4631      	mov	r1, r6
 8007dda:	e7ef      	b.n	8007dbc <_reclaim_reent+0x8c>
 8007ddc:	2500      	movs	r5, #0
 8007dde:	e7ef      	b.n	8007dc0 <_reclaim_reent+0x90>
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	bf00      	nop
 8007de4:	20000010 	.word	0x20000010

08007de8 <__malloc_lock>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__malloc_lock+0x8>)
 8007dea:	f7ff bf7b 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	20005050 	.word	0x20005050

08007df4 <__malloc_unlock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__malloc_unlock+0x8>)
 8007df6:	f7ff bf76 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20005050 	.word	0x20005050

08007e00 <_free_r>:
 8007e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d048      	beq.n	8007e98 <_free_r+0x98>
 8007e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0a:	9001      	str	r0, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e12:	bfb8      	it	lt
 8007e14:	18e4      	addlt	r4, r4, r3
 8007e16:	f7ff ffe7 	bl	8007de8 <__malloc_lock>
 8007e1a:	4a20      	ldr	r2, [pc, #128]	; (8007e9c <_free_r+0x9c>)
 8007e1c:	9801      	ldr	r0, [sp, #4]
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	4615      	mov	r5, r2
 8007e22:	b933      	cbnz	r3, 8007e32 <_free_r+0x32>
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	6014      	str	r4, [r2, #0]
 8007e28:	b003      	add	sp, #12
 8007e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e2e:	f7ff bfe1 	b.w	8007df4 <__malloc_unlock>
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	d90b      	bls.n	8007e4e <_free_r+0x4e>
 8007e36:	6821      	ldr	r1, [r4, #0]
 8007e38:	1862      	adds	r2, r4, r1
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	bf04      	itt	eq
 8007e3e:	681a      	ldreq	r2, [r3, #0]
 8007e40:	685b      	ldreq	r3, [r3, #4]
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	bf04      	itt	eq
 8007e46:	1852      	addeq	r2, r2, r1
 8007e48:	6022      	streq	r2, [r4, #0]
 8007e4a:	602c      	str	r4, [r5, #0]
 8007e4c:	e7ec      	b.n	8007e28 <_free_r+0x28>
 8007e4e:	461a      	mov	r2, r3
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	b10b      	cbz	r3, 8007e58 <_free_r+0x58>
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d9fa      	bls.n	8007e4e <_free_r+0x4e>
 8007e58:	6811      	ldr	r1, [r2, #0]
 8007e5a:	1855      	adds	r5, r2, r1
 8007e5c:	42a5      	cmp	r5, r4
 8007e5e:	d10b      	bne.n	8007e78 <_free_r+0x78>
 8007e60:	6824      	ldr	r4, [r4, #0]
 8007e62:	4421      	add	r1, r4
 8007e64:	1854      	adds	r4, r2, r1
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	6011      	str	r1, [r2, #0]
 8007e6a:	d1dd      	bne.n	8007e28 <_free_r+0x28>
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	6053      	str	r3, [r2, #4]
 8007e72:	4421      	add	r1, r4
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	e7d7      	b.n	8007e28 <_free_r+0x28>
 8007e78:	d902      	bls.n	8007e80 <_free_r+0x80>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	e7d3      	b.n	8007e28 <_free_r+0x28>
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	1961      	adds	r1, r4, r5
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf04      	itt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	6063      	str	r3, [r4, #4]
 8007e8e:	bf04      	itt	eq
 8007e90:	1949      	addeq	r1, r1, r5
 8007e92:	6021      	streq	r1, [r4, #0]
 8007e94:	6054      	str	r4, [r2, #4]
 8007e96:	e7c7      	b.n	8007e28 <_free_r+0x28>
 8007e98:	b003      	add	sp, #12
 8007e9a:	bd30      	pop	{r4, r5, pc}
 8007e9c:	20004fbc 	.word	0x20004fbc

08007ea0 <_init>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	bf00      	nop
 8007ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea6:	bc08      	pop	{r3}
 8007ea8:	469e      	mov	lr, r3
 8007eaa:	4770      	bx	lr

08007eac <_fini>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr
