ARM GAS  /tmp/ccpc7FNV.s 			page 1


   1              		.cpu arm7tdmi
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"sysmem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._sbrk,"ax",%progbits
  16              		.align	1
  17              		.global	_sbrk
  18              		.arch armv4t
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	_sbrk:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "Core/Src/sysmem.c"
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c ****  ******************************************************************************
   3:Core/Src/sysmem.c ****  * @file      sysmem.c
   4:Core/Src/sysmem.c ****  * @author    Generated by STM32CubeIDE
   5:Core/Src/sysmem.c ****  * @brief     STM32CubeIDE System Memory calls file
   6:Core/Src/sysmem.c ****  *
   7:Core/Src/sysmem.c ****  *            For more information about which C functions
   8:Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:Core/Src/sysmem.c ****  *            please consult the newlib libc manual
  10:Core/Src/sysmem.c ****  ******************************************************************************
  11:Core/Src/sysmem.c ****  * @attention
  12:Core/Src/sysmem.c ****  *
  13:Core/Src/sysmem.c ****  * Copyright (c) 2021 STMicroelectronics.
  14:Core/Src/sysmem.c ****  * All rights reserved.
  15:Core/Src/sysmem.c ****  *
  16:Core/Src/sysmem.c ****  * This software is licensed under terms that can be found in the LICENSE file
  17:Core/Src/sysmem.c ****  * in the root directory of this software component.
  18:Core/Src/sysmem.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  19:Core/Src/sysmem.c ****  *
  20:Core/Src/sysmem.c ****  ******************************************************************************
  21:Core/Src/sysmem.c ****  */
  22:Core/Src/sysmem.c **** 
  23:Core/Src/sysmem.c **** /* Includes */
  24:Core/Src/sysmem.c **** #include <errno.h>
  25:Core/Src/sysmem.c **** #include <stdint.h>
  26:Core/Src/sysmem.c **** 
  27:Core/Src/sysmem.c **** /**
  28:Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
  29:Core/Src/sysmem.c ****  */
  30:Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
  31:Core/Src/sysmem.c **** 
ARM GAS  /tmp/ccpc7FNV.s 			page 2


  32:Core/Src/sysmem.c **** /**
  33:Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  34:Core/Src/sysmem.c ****  *        and others from the C library
  35:Core/Src/sysmem.c ****  *
  36:Core/Src/sysmem.c ****  * @verbatim
  37:Core/Src/sysmem.c ****  * ############################################################################
  38:Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  39:Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  40:Core/Src/sysmem.c ****  * ############################################################################
  41:Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  42:Core/Src/sysmem.c ****  * @endverbatim
  43:Core/Src/sysmem.c ****  *
  44:Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  45:Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  46:Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  47:Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  48:Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  49:Core/Src/sysmem.c ****  *
  50:Core/Src/sysmem.c ****  * @param incr Memory size
  51:Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  52:Core/Src/sysmem.c ****  */
  53:Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  54:Core/Src/sysmem.c **** {
  28              		.loc 1 54 1 view -0
  29              		.cfi_startproc
  30              		@ Function supports interworking.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 54 1 is_stmt 0 view .LVU1
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0300     		movs	r3, r0
  55:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  40              		.loc 1 55 3 is_stmt 1 view .LVU2
  56:Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  41              		.loc 1 56 3 view .LVU3
  57:Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  42              		.loc 1 57 3 view .LVU4
  58:Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  43              		.loc 1 58 3 view .LVU5
  44              		.loc 1 58 32 is_stmt 0 view .LVU6
  45 0004 0D4A     		ldr	r2, .L7
  46              		.loc 1 58 53 view .LVU7
  47 0006 0E49     		ldr	r1, .L7+4
  48              		.loc 1 58 18 view .LVU8
  49 0008 521A     		subs	r2, r2, r1
  50              	.LVL1:
  59:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  51              		.loc 1 59 3 is_stmt 1 view .LVU9
  60:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  52              		.loc 1 60 3 view .LVU10
  61:Core/Src/sysmem.c **** 
  62:Core/Src/sysmem.c ****   /* Initialize heap end at first call */
  63:Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
ARM GAS  /tmp/ccpc7FNV.s 			page 3


  53              		.loc 1 63 3 view .LVU11
  54              		.loc 1 63 12 is_stmt 0 view .LVU12
  55 000a 0E49     		ldr	r1, .L7+8
  56 000c 0968     		ldr	r1, [r1]
  57              		.loc 1 63 6 view .LVU13
  58 000e 0029     		cmp	r1, #0
  59 0010 09D0     		beq	.L5
  60              	.LVL2:
  61              	.L2:
  64:Core/Src/sysmem.c ****   {
  65:Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  66:Core/Src/sysmem.c ****   }
  67:Core/Src/sysmem.c **** 
  68:Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  69:Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  62              		.loc 1 69 3 is_stmt 1 view .LVU14
  63              		.loc 1 69 23 is_stmt 0 view .LVU15
  64 0012 0C49     		ldr	r1, .L7+8
  65 0014 0868     		ldr	r0, [r1]
  66 0016 C318     		adds	r3, r0, r3
  67              	.LVL3:
  68              		.loc 1 69 6 view .LVU16
  69 0018 9342     		cmp	r3, r2
  70 001a 08D8     		bhi	.L6
  70:Core/Src/sysmem.c ****   {
  71:Core/Src/sysmem.c ****     errno = ENOMEM;
  72:Core/Src/sysmem.c ****     return (void *)-1;
  73:Core/Src/sysmem.c ****   }
  74:Core/Src/sysmem.c **** 
  75:Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  71              		.loc 1 75 3 is_stmt 1 view .LVU17
  72              	.LVL4:
  76:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  73              		.loc 1 76 3 view .LVU18
  74              		.loc 1 76 19 is_stmt 0 view .LVU19
  75 001c 094A     		ldr	r2, .L7+8
  76              	.LVL5:
  77              		.loc 1 76 19 view .LVU20
  78 001e 1360     		str	r3, [r2]
  77:Core/Src/sysmem.c **** 
  78:Core/Src/sysmem.c ****   return (void *)prev_heap_end;
  79              		.loc 1 78 3 is_stmt 1 view .LVU21
  80              	.LVL6:
  81              	.L1:
  79:Core/Src/sysmem.c **** }
  82              		.loc 1 79 1 is_stmt 0 view .LVU22
  83              		@ sp needed
  84 0020 10BC     		pop	{r4}
  85 0022 02BC     		pop	{r1}
  86 0024 0847     		bx	r1
  87              	.LVL7:
  88              	.L5:
  65:Core/Src/sysmem.c ****   }
  89              		.loc 1 65 5 is_stmt 1 view .LVU23
  65:Core/Src/sysmem.c ****   }
  90              		.loc 1 65 21 is_stmt 0 view .LVU24
  91 0026 0749     		ldr	r1, .L7+8
ARM GAS  /tmp/ccpc7FNV.s 			page 4


  92 0028 0748     		ldr	r0, .L7+12
  93              	.LVL8:
  65:Core/Src/sysmem.c ****   }
  94              		.loc 1 65 21 view .LVU25
  95 002a 0860     		str	r0, [r1]
  96 002c F1E7     		b	.L2
  97              	.LVL9:
  98              	.L6:
  71:Core/Src/sysmem.c ****     return (void *)-1;
  99              		.loc 1 71 5 is_stmt 1 view .LVU26
 100 002e FFF7FEFF 		bl	__errno
 101              	.LVL10:
  71:Core/Src/sysmem.c ****     return (void *)-1;
 102              		.loc 1 71 11 is_stmt 0 view .LVU27
 103 0032 0C23     		movs	r3, #12
 104 0034 0360     		str	r3, [r0]
  72:Core/Src/sysmem.c ****   }
 105              		.loc 1 72 5 is_stmt 1 view .LVU28
  72:Core/Src/sysmem.c ****   }
 106              		.loc 1 72 12 is_stmt 0 view .LVU29
 107 0036 0120     		movs	r0, #1
 108 0038 4042     		rsbs	r0, r0, #0
 109 003a F1E7     		b	.L1
 110              	.L8:
 111              		.align	2
 112              	.L7:
 113 003c 00000000 		.word	_estack
 114 0040 00000000 		.word	_Min_Stack_Size
 115 0044 00000000 		.word	.LANCHOR0
 116 0048 00000000 		.word	_end
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.section	.bss.__sbrk_heap_end,"aw",%nobits
 121              		.align	2
 122              		.set	.LANCHOR0,. + 0
 125              	__sbrk_heap_end:
 126 0000 00000000 		.space	4
 127              		.text
 128              	.Letext0:
 129              		.file 2 "/usr/lib/gcc/arm-none-eabi/11.2.0/include/stddef.h"
 130              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 131              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 132              		.file 5 "/usr/arm-none-eabi/include/sys/errno.h"
ARM GAS  /tmp/ccpc7FNV.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sysmem.c
     /tmp/ccpc7FNV.s:24     .text._sbrk:0000000000000000 _sbrk
     /tmp/ccpc7FNV.s:34     .text._sbrk:0000000000000000 $t
     /tmp/ccpc7FNV.s:113    .text._sbrk:000000000000003c $d
     /tmp/ccpc7FNV.s:121    .bss.__sbrk_heap_end:0000000000000000 $d
     /tmp/ccpc7FNV.s:125    .bss.__sbrk_heap_end:0000000000000000 __sbrk_heap_end

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
